metadata:
  title: Small claims complaint
  short title: Small claims complaint
  comment: This program makes the forms to sue someone for up to $10,000. It can be used to sue a landlord for a security deposit.
  authors:
    - Vivian McNaughton
    - Matt Newsted
---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALToolbox:phone-number-validation.yml
  - docassemble.ILAO:ilao-interview-framework.yml
  - docassemble.ILAO:shared-basic-questions.yml
---
objects:
  - users: ALPeopleList.using(there_are_any=True)
  - filing_location: ALAddress
  - other_parties: ALPeopleList.using(object_type=ALIndividual, complete_attribute=['complete'], there_are_any=True, maximum_number=9)
  - other_parties[i].agent: ALIndividual
  - other_parties[i].service_address: ALAdress
  - other_parties[i].alt_service_address: ALAddress
  - court_list: ALCourtLoader.using(file_name='docassemble.ILAO:data/sources/il_courts.xlsx')
  - rental_address: ALAddress
  - deposit_payments: DAList
  - deposit_dates: DAList
  - another_deposit: DAList
  - other_parties[i].where_to_serve: ALAddress
---
mandatory: True
objects:
  - watermark: DAStaticFile.using(filename="preview_watermark_text.png")
---
code: |
  ilao_easy_form_title = "Small claims complaint"
  ilao_easy_form_url = "https://www.illinoislegalaid.org/legal-information/small-claims-complaint"
  github_user = 'IllinoisLegalAidOnline'
  github_repo_name = 'docassemble-SmallClaimsComplaint'
---
# Road map
sections:
  - section_intro: Start
  - section_case: About the case
  - section_service: Service information
  - section_about_you: About you
  - section_download: Download
---
# interview order block
mandatory: True
code: |
  nav.set_section('section_intro')
  user_ask_role = "plaintiff"
  sees_nav_bar
  snapshot_start
  set_progress(5)
  how_to_use
  accept_terms
  small_claims_explainer
  to_consider
  if age_check == False:
    age_kickout
  if corporation_check:
    corporation_kickout
  if money_check == True:
    money_kickout
  nav.set_section('section_case')
  #landlord_check is an important variable. The program differs substantially based on its value; if True, the program goes into the detailed security deposit claim path.
  landlord_check
  snapshot_intermediate
  if not landlord_check:
    amount_check
    if show_amount_kickout:
      amount_kickout
  else:
    note_about_amount_limit
  filing_location.county_number
  filing_location.get_county
  if filing_location.county_number == -1:
    if landlord_check == False:
      if amount_check < 3000.01:
        if cook_district == "15":
          daley_center_note
    else:
      if cook_district == "15":
        daley_center_note
  other_parties.gather()
  if other_parties.number_gathered() == 9:
    blank_summons_check
  set_progress(20)
  #Here lies the security deposit path
  if landlord_check == True:
    rental_address.address
    rental_address.county_correct
    #The unique ordinances the program need to consider are, as of March 2024, those in Chicago, Evanston, Oak Park, Urbana, Mount Prospect, DeKalb (city, not the county), and Cook County.
    if rental_address.city.lower() == "chicago" or rental_address.city.lower() == "evanston" or rental_address.city.lower() == "oak park" or rental_address.city.lower() == "urbana" or rental_address.city.lower() ==  "mount prospect" or rental_address.city.lower() == "dekalb" or end_in_county(rental_address.county).lower() == "cook county":
      municipal_intro
      if rental_address.city.lower() == "chicago":
        #The chicago fire page is included because someone who moved out due to a fire or natural disaster is entitled to their security deposit more quickly, and also because complications can arise.
        chicago_fire
      #some types of properties are not covered by the revelvant municipal/county ordinances. What those types are can vary from ordinance to ordinance.
      if property_type_check == False:
        #municipal/county ordinances generally do not apply for units in owner-occupied properties containing few enough units. The unit number limits vary a bit.
        if owner_occupant == True:
          unit_number_general
           
          #if a rental unit is covered by the cook county ordinance, there is another condition that can impact whether the property is covered. If it is the only residential unit leased by the owner and the The owner or immediate family member has actually resided at the property for at least one (1) month in the 12 months prior to marketing the property, then the Cook County ordinance does not cover it. This is a fairly specific situation,, to be sure.
        elif end_in_county(rental_address.county).lower() == "cook county" and rental_address.city.lower() != "evanston" and rental_address.city.lower() != "mount prospect" and rental_address.city.lower() != "chicago" and rental_address.city.lower() != "oak park":
          cook_family_check
    else:
      property_type_code
    rlto_note
    move_in_date
    if moved_out == False:
      no_move_kickout
    move_out_date
    if demand_letter_check == False:
      no_demand_kickout
    demand_letter_date
    set_progress(40)
    if return_date_diff_reference.days < 0 or damage_date_diff_reference.days < 0:
      landlord_time_kickout
    
    landlord_deadline
    deposit_payments[0]
    deposit_dates[0]
    if another_deposit[0] == True:
      deposit_payments[1]
      deposit_dates[1]
      if another_deposit[1] == True:
        deposit_payments[2]
        deposit_dates[2]
    if partial_return_check == True:
      partial_return_amount
      partial_return_date
      
    if deposit_balance_owed > 0:
      deposit_still_owed
      #if deposit_balance_owed < 10000:
      #  deposit_still_owed
      #else:
      #  too_much_owed
    else:
      all_paid_error
    
    if damages_check:
      dispute_withholding
      damages_date
      
    #deposit_debug
    if deposit_with_damages > 10000:
      deposit_damages_too_big
    deposit_damages_info
    set_progress(60)
    if lease_check == True:
      if lease_attach_check == False:
        lease_attach_explain
    deposit_payment_proof
    demand_letter_attach
    generate_default
    use_that_default
    chop_off_county
    if use_new_text == True:
      preview_complaint
      if add_second_page == True:
        more_deposit_reason
        preview_additional_reasons
         

  else:
    if agreement_check == True:
      if attach_check == False:
        attach_explain
      
    if demand_check == True:
      demand_answer_check
    #  if demand_answer_check == "part_paid":
    #    if partial_payment_amount == amount_check:
    #      demand_answered_kickout
    #    else:
    #      if generic_amount_update == True:
    #        generic_amount_updated
    set_progress(40)
    claim_reason
    chop_off_county
    set_progress(60)
    preview_complaint
    if add_second_page == True:
      
      more_reason
      preview_additional_reasons

  evidence
  
  nav.set_section('section_service')
  service_intro
  set_progress(80)
  for person in other_parties:
    person.address.address
    person.person_catch
    if person.agent_check == True:
      person.agent.name.first
      person.service_address.address
    elif person.same_address != True:
      person.service_address.address
    person.service_phone
    person.service_email
    if person.agent_check == False:
      if person.alt_delivery == True:
        person.alt_service_address.address
        person.alt_service_phone
        person.alt_service_email
    person.service_method
  next_steps
  
  nav.set_section('section_about_you')
  set_progress(90)
  users[0].name.first
  users[0].address.address
  users[0].has_email_address
  e_signature
  
  nav.set_section('section_download')
  forms_assembling
  attachment_logic
  #order_info
  snapshot_forms
  get_docs_screen
---
code: |
  stuff_to_snapshot = {
  	'start_time': str(current_datetime().format_datetime()),
  	'started_interview': True, 
  	}
    
  try:
    stuff_to_snapshot['ip_address'] = device(ip=True)
  except:
    pass
    
  stuff_to_snapshot['user_zip'] = showifdef('users[0].address.zip')

  stuff_to_snapshot['downloaded_forms'] = showifdef('forms_assembling')
  
  stuff_to_snapshot['seeking_security_deposit'] = showifdef('landlord_check')
  
  stuff_to_snapshot['rental_city'] = showifdef('rental_address.city')
  
  stuff_to_snapshot['rental_county'] = showifdef('rental_address.county')  
  
  store_variables_snapshot(
  	data=stuff_to_snapshot, persistent=True
  	)
  snapshot_interview_state = True
---
code: |
  snapshot_interview_state
  snapshot_start = True  
---
code: |
  reconsider('snapshot_interview_state')
  snapshot_intermediate = True
---
code: |
  reconsider('snapshot_interview_state')
  snapshot_forms = True
---
#Gathers defendants
code: |
  other_parties[i].name.first
  #other_parties[i].address.address
  other_parties[i].complete = True
---
reconsider: True
code: |
  quick_county_storage = filing_location.county.lower()
  if quick_county_storage.endswith(" county"):
    filing_location.county = filing_location.county[:-7]
    chop_off_county = True
  else:
    chop_off_county = False
---
id: welcome
question: |
  Small claims complaint
subquestion: |
  Welcome to Illinois Legal Aid Online's **Small claims complaint** Easy Form.

  This program makes the forms to sue a person or business for up to $10,000. It can be used to sue a landlord for a security deposit.
  
  To learn more, read ILAO's article about [**suing someone for $10,000 or less**](https://www.illinoislegalaid.org/node/31626).
field: sees_nav_bar
---
id: how to use
continue button field: how_to_use
question: |
  Instructions
subquestion: |
  To complete this program, you will need to know:

  * The name and address of the person or business you are suing, and
  * The reasons you are suing them.
  
  If you are suing your former landlord to return your security deposit, you need to know:
  
  * The name and address of your former landlord,
  * The dates you moved in and moved out of the apartment,
  * The amount and date of security deposit payments you made, and
  * The date you sent your demand letter to the landlord.

  Set aside 10 to 20 minutes to finish this program. You can log in and save your work to return to later. 
  
  ${ collapse_template(help_example) }  

  Click on **{green words}** to learn what they mean. Some questions have a question mark in a circle ${ fa_icon("question-circle", color_css="#0dcaf0" ) } that also gives help.
---
template: help_example

subject: |

  **You can expand sections like this to show more information.**

content: |  

  This is an example of help. Click again to hide.
---
id: small claims explainer
continue button field: small_claims_explainer
question: |
  About Small Claims Court
subquestion: |
  Small Claims Court is a place where you can sue a person or business for $10,000 or less. The case may be based on an agreement or the fact that someone has harmed you or your property.

  Examples of cases that can be filed in Small Claims Court include:

  * Someone physically injured you or damaged your property and refuses to pay for your loss,
  * Your landlord refuses to return your security deposit,
  * Someone owes you money for work you have done, but refuses to pay you, or
  * You paid for work to be done, but the work was done poorly and the contractor refuses to fix it.
---
id: considerations
continue button field: to_consider
question: |
  Before filing a *Small Claims Complaint*
subquestion: |
  Here are some things to consider before filing a *Small Claims Complaint*:

  * Try contacting the other person or business to solve the problem out of court. If you are successful, you save time, effort, and money. Call or write the other party to explain your position and the settlement you want.
  * Consider whether the person or business has money, income, or property. If they do not have any money, you may not be able to collect even if the judge decides they owe you money and enters a judgment against them.
  
  To learn more, read ILAO's article about [**your options before filing a small claims case**](https://www.illinoislegalaid.org/legal-information/what-consider-filing-small-claims-case).
---
id: user name
question: |
  What is your name?
fields:
  - First: users[0].name.first
  - Middle: users[0].name.middle
    required: False
  - Last: users[0].name.last
  - Suffix: users[0].name.suffix
    code: |
      name_suffix()
    required: False
---
id: user address
question: |
  What is your mailing address?
fields:
  - Street address: users[0].address.address
    address autocomplete: True
  - Address line 2: users[0].address.unit
    required: False
  - City: users[0].address.city
  - State: users[0].address.state
    code: |
      states_list() 
  - ZIP code: users[0].address.zip
---
id: your contact information
question: |
  Your contact information
subquestion: |
  ${ collapse_template(contact_info_help) }  
fields:  
  - Phone number: users[0].phone_number
    datatype: al_international_phone
    required: False
  - label: |
      Do you have an email address?
    field: users[0].has_email_address      
    datatype: yesnoradio
  - note: |
      This email address will appear on your court forms. Be sure to check 
      this email daily, otherwise you may miss important information about 
      your case.
    show if: x.has_email_address      
  - Email address: users[0].email    
    datatype: email
    show if: 
      variable: users[0].has_email_address
      is: True
#validation code: |
#  if (not showifdef('users[0].phone_number') and \
#      (users[0].has_email_address == False)):
#    validation_error(word("You need to provide at least one contact method."), field="users[0].other_contact_method")
---
template: contact_info_help
subject: |
  **Why do I need to include this?**
content: |  
  The court must be able to reach you, so you need to include some contact information.
---
id: age check
question: |
  Are you 18 years old or older?
fields:
  - no label: age_check
    datatype: yesnoradio
---
id: age kickout
event: age_kickout
question: |
  Sorry
subquestion: |
  You must be 18 years old or older to use this program.
  
  A parent or guardian can sue for injury or money loss to a minor child.
  
   Click **Back** if you made a mistake. Or you can talk with a lawyer to discuss your options. Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
buttons:
  - Exit: exit
  - Restart: restart
---
id: corporation check
question: |
  Are you filing a suit for a corporation or another organization?
fields:
  - no label: corporation_check
    datatype: yesnoradio
---
id: corporation kickout
event: corporation_kickout
question: |
  Sorry
subquestion: |
  You must be suing as a person, not on behalf of a corporation, to use this program.

  Corporations can sue in Small Claims Court, but they need to be represented by a lawyer.
  
   Click **Back** if you made a mistake. Or you can talk with a lawyer to discuss your options. Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
buttons:
  - Exit: exit
  - Restart: restart
---
id: money only check
question: |
  Are you suing for anything besides money?
subquestion: |
  Small Claims Court judges can order a judgment only for money.

  The judge cannot require a person or business to do something or stop doing something, or to return property.
fields:
  - no label: money_check
    datatype: yesnoradio
---
id: money only kickout
event: money_kickout
question: |
  Sorry
subquestion: |
  You can only sue for money in Small Claims Court.

  The Small Claims Court judge cannot require a person or business to do something or stop doing something, or to return property.
  
  To learn more about your other options, read ILAO's article on [**starting a lawsuit**](https://www.illinoislegalaid.org/legal-information/starting-lawsuit-0).
  
  Click **Back** if you made a mistake. Or you can talk with a lawyer to discuss your options. Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
buttons:
  - Exit: exit
  - Restart: restart
---
id: amount too big
continue button field: amount_kickout
question: |
  Your claim is too big for Small Claims Court
subquestion: |
  If your total claim is over $10,000 you can still sue in Small Claims Court, but the most you can ask for is $10,000. If you want to sue for more, check with your local circuit clerk to learn which division you should use.
  
  To learn more about your other options, read ILAO's article on [**starting a lawsuit**](https://www.illinoislegalaid.org/legal-information/starting-lawsuit-0).
  
   Click **Back** if you made a mistake. Or you can talk with a lawyer to discuss your options. Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
   
   If you would like to file in Small Claims Court, you can click **Next**.
---
sets: 
  - amount_check
id: amount check
question: |
  How much money are you suing for?
subquestion: |
  Do not include court costs in this amount.
fields:
  - Amount owed: amount_check
    datatype: currency
    step: 0.01
validation code: |
  if amount_check > 10000:
    show_amount_kickout = True
    amount_check = 10000
  else:
    show_amount_kickout = False
---
id: note about amount limit
continue button field: note_about_amount_limit
question: |
  About claim limits
subquestion: |
  You can only sue for $10,000 or less in Small Claims Court. If you want to sue for more, check with your local circuit clerk to learn which division you should use.
  
  Depending on where your rental unit is, you may be able to sue for damages in addition to the amount of your unreturned security deposit. However, these damages may make your claim too big for Small Claims Court.
  
  If your total claim is over $10,000, you can still sue in Small Claims Court, but the most you can ask for is $10,000.
  
  This program will calculate how much you can sue for. If your claim is too big for Small Claims Court, this program will let you know.
---
id: filing county
question: |
  In which county are you filing your complaint?
subquestion: |
  % if landlord_check == True:
  If you are suing a former landlord to return your security deposit, you should file in the county:

  * Where the apartment is,
  * Where the landlord lives, or
  * Where the landlord has an office.
  
  % endif
  ${ collapse_template(county_lookup_help) }
fields:
  - County: filing_location.county_number
    datatype: integer
    code: |
      ilao_court_county_lookup(court_list)
---
depends on:
  - filing_location.county_number
  - cook_district
code: |
  if filing_location.county_number == -1:
    reference_number = court_list.as_court('trial_court', cook_district)
  else:
    reference_number = court_list.as_court('trial_court', filing_location.county_number)
    
  court_name = str(reference_number.name)
  court_street_address = str(reference_number.address.address)
  court_city = str(reference_number.address.city)
  court_state = str(reference_number.address.state)
  court_zip = str(reference_number.address.zip)
  courthouse_info = court_name + ", " + court_street_address + ", " + court_city + ", " + court_state + " " + court_zip
---
depends on:
  - filing_location.county_number
code: |  
  filing_location.county = reference_number.address.county + " County" 
  filing_location.get_county = True
---
id: Cook County district
question: |
  In which Cook County courthouse will you file your case?
subquestion: |
  ${ collapse_template(cook_district_help) }  
field: cook_district
choices:
  - First Municipal District, Daley Center, 50 W. Washington Street, Chicago: 15
    help: |
      The First Municipal District covers the **City of Chicago**. 
  - Second Municipal District, 5600 Old Orchard Road, Skokie: 16
    help: |
      The Second Municipal District covers the **northern suburbs of Cook County**. It includes:
      
      * Deerfield
      * Des Plaines
      * Evanston
      * Glencoe
      * Glenview
      * Golf
      * Kenilworth
      * Lincolnwood
      * Maine (not within Rosemont)
      * Morton Grove
      * New Trier
      * Niles
      * Northbrook
      * Northfield (not within Prospect Heights)
      * Park Ridge
      * Skokie
      * Wilmette
      * Winnetka
      * Wheeling (within Des Plaines)
  - Third Municipal District, 2121 Euclid Avenue, Rolling Meadows: 17
    help: |
      The Third Municipal District covers the **northwestern suburbs of Cook County**. It includes:

      * Arlington Heights
      * Barrington
      * Barrington Hills
      * Bartlett
      * Bensenville
      * Buffalo Grove
      * East Dundee
      * Elgin
      * Elk Grove
      * Elk Grove Village
      * Hanover
      * Hanover Park
      * Harwood Heights
      * Hoffman Estates
      * Inverness
      * Leyden (within Rosemont and Schiller Park)
      * Maine (within Rosemont)
      * Mount Prospect
      * Norridge
      * Northfield (within Prospect Heights)
      * Norwood Park (not within Chicago)
      * Palatine
      * Prospect Heights
      * Rolling Meadows
      * Roselle
      * Rosemont
      * Schaumburg
      * Schiller Park
      * South Barrington
      * Streamwood
      * Wheeling (not within Des Plaines)    
  - Fourth Municipal District, 1500 Maybrook Drive, Maywood: 18
    help: |
      The Fourth Municipal District covers the **western suburbs of Cook County**. It includes:
      
      * Bellwood
      * Berkeley
      * Berwyn
      * Broadview
      * Brookfield
      * Cicero
      * Elmwood Park
      * Forest Park
      * Franklin Park
      * Hillside
      * La Grange Park
      * Leyden (not within Rosemont and Schiller Park)
      * Maywood
      * Melrose Park
      * Northlake
      * North Riverside
      * Oak Park
      * Proviso
      * River Forest
      * River Grove
      * Riverside
      * Stone Park
      * Westchester  
  - Fifth Municipal District, 10220 S. 76th Avenue, Bridgeview: 19
    help: |
      The Fifth Municipal District covers the **southwestern suburbs of Cook County**. It includes:
      
      * Alsip
      * Bedford Park
      * Bridgeview
      * Burbank
      * Burr Ridge
      * Chicago Ridge
      * Crestwood
      * Countryside
      * Evergreen Park
      * Forest View
      * Hickory Hills
      * Hinsdale
      * Hodgkins
      * Hometown
      * Indian Head Park
      * Justice
      * La Grange
      * Lemont
      * Lyons
      * McCook
      * Merrionette Park
      * Oak Forest
      * Oak Lawn
      * Orland Hills
      * Orland Park
      * Palos
      * Palos Heights
      * Palos Hills
      * Palos Park
      * Stickney
      * Summit
      * Tinley Park
      * Western Springs
      * Willow Springs
      * Woodridge
      * Worth
  - Sixth Municipal District, 16501 South Kedzie Parkway, Markham: 20
    help: |
      The Sixth Municipal District covers the **southern suburbs of Cook County**. It includes:
      
      * Bloom
      * Blue Island
      * Bremen
      * Burnham
      * Calumet
      * Calumet City
      * Calumet Park
      * Chicago Heights
      * Country Club Hills
      * Crete
      * Dixmoor
      * Dolton
      * East Hazel Crest
      * Flossmoor
      * Ford Heights
      * Glenwood
      * Harvey
      * Hazel Crest
      * Homewood
      * Lansing
      * Lynwood
      * Markham
      * Matteson
      * Midlothian
      * Olympia Fields
      * Park Forest
      * Phoenix
      * Posen
      * Rich
      * Richton Park
      * Riverdale
      * Robbins
      * Sauk Village
      * South Chicago Heights
      * South Holland
      * Steger
      * Thornton  
---
template: cook_district_help
subject: |
  **What if I am not sure?**
content: |  
  Visit **[Illinois Court Help](https://www.ilcourthelp.gov/)**, or you can call or text (833) 411-1121 for assistance.
---
id: daley center note
continue button field: daley_center_note
question: |
  Free help at the Daley Center
subquestion: |
  If you are filing for $3,000.00 or less, you may be able to get free help at the [**Daley Center's Pro Se Small Claims Court**](https://www.cookcountycourt.org/district/first-municipal-district-chicago/pro-se-small-claims-court).
  
  While it may be easier to get help at the Daley Center, you can still continue to make forms with this program.
---
#Note: may need to change this so that a non-incorporated business's name and owner's name are associated with the same indvidual within other_parties
sets:
  - other_parties[i].name.first
id: defendant name
question: |
  What is the ${ordinal(i)} defendant's name?
subquestion: |
  % if i == 0:
  In Small Claims Court, the person filing the case is the plaintiff. The person or company that the plaintiff is suing is the defendant. There can be more than one defendant.
  
  % endif
  You cannot collect money against a defendant who is incorrectly named on the *Small Claims Complaint*.
  
  ${collapse_template(help_suing_business)}
  
fields:
  - code: |
      other_parties[i].name_fields(person_or_business='unsure')
  #- First: other_parties[i].name.first
  #- Last: other_parties[i].name.last
---
template: help_suing_business
subject: |
  **What if I am suing a business?**
content: |  
  **Important:** If a business is not incorporated, you will need to list both the business and the business owner as defendants.
  
  You will need to list both the business and its owner if the business is:
  
  * An unincorporated business,
  * A sole proprietorship, or
  * A general partnership.
  
  Incorporated businesses are listed in the [**Illinois Secretary of State's website**](https://apps.ilsos.gov/businessentitysearch/). You do not need to list an owner for an incorporated business.
  
  If the business has a registered agent, you do not need to list the agent as a defendant. You will be able to add their information later in the interview.
---
sets:
  -other_parties[i].address.address
id: defendant address
question: |
  What is ${other_parties[i].name.full(middle='full')}'s address?
subquestion: |
  % if other_parties[i].person_type == "business":
  You can find the address of some businesses on the [**Illinois Secretary of State's website**](https://apps.ilsos.gov/businessentitysearch/).

  If ${other_parties[i].name.full(middle='full')} has a registered agent, you can enter the agent's information on other screens. On this screen, enter ${other_parties[i].name.full(middle='full')}'s address.
  % endif
fields:
  - Street address: other_parties[i].address.address
    address autocomplete: True
  - Address line 2: other_parties[i].address.unit
    required: False
  - City: other_parties[i].address.city
  - State: other_parties[i].address.state
    code: |
      states_list()
  - ZIP code: other_parties[i].address.zip
---
id: more than 9 defendants
question: |
  Are there any more defendants?
subquestion: |
  You can sue more than 9 defendants with this program, but this program will only make *Summons* forms for the first 9 defendants.
  
  You will need to fill out *Summons* forms for any other defendants in your case. 
  
  If you choose **Yes**, you can download blank *Summons* forms at the end of this program.
fields:
  - "Anyone else?": blank_summons_check
    datatype: yesnoradio
---
id: any other defendants
question: |
  Do you have any other defendants to tell us about?
subquestion: |
  So far you have told us about ${comma_and_list(other_parties.complete_elements().full_names())}.
  
  ${collapse_template(help_suing_business)}
fields:
  - "Anyone else?": other_parties.there_is_another
    datatype: yesnoradio
---
id: landlord check
question: |
  Are you suing your former landlord to return a security deposit?
subquestion: |
  To learn more, read ILAO's article about [**getting or returning a security deposit**](https://www.illinoislegalaid.org/node/31176).
fields:
  - no label: landlord_check
    datatype: yesnoradio
---
id: under construction
continue button field: under_construction
question: |
  Under construction
---
id: agreement check
question: |
  % if other_parties.number_gathered() > 1:
  Did you have a written agreement with the defendants?
  % else:
  Did you have a written agreement with ${other_parties[0].name.full(middle='full')}?
  % endif
subquestion: |
  This could be a contract or some other proof of an agreement. 
  
  A receipt of a purchase can be a written agreement.
  
  If you had a written agreement, you should click **Yes** even if you lost your copy.
fields:
  - no label: agreement_check
    datatype: yesnoradio
---
id: attach check
question: |
  Will you attach your written agreement to the *Small Claims Complaint*?
subquestion: |
  If you have a written agreement, you should attach it to your *Small Claims Complaint*.

  If you cannot attach the written agreement, you can explain why on the next screen.
fields:
  - no label: attach_check
    datatype: yesnoradio
---
id: no attachment explanation
question: |
   Why can't you attach a copy of your written agreement to your *Small Claims Complaint*?
fields:
  - Explanation: attach_explain
    input type: area
    rows: 4
    maxlength: 175
---
id: demand payment check
question: |
  Have you demanded payment of ${currency(amount_check)}?
subquestion: |
  % if other_parties.number_gathered() > 1:
  This does not need to be a written request. If you asked the defendants to pay you ${currency(amount_check)}, click **Yes**.
  % else:
  This does not need to be a written request. If you asked the ${other_parties[0].name.full(middle='full')} to pay you ${currency(amount_check)}, click **Yes**.
  % endif
fields:
  - no label: demand_check
    datatype: yesnoradio
---
id: demand answer check
question: |
  % if other_parties.number_gathered() > 1:
  Have defendants failed to pay you the full amount of ${currency(amount_check)}?
  % else:
  Has ${other_parties[0].name.full(middle='full')} failed to pay you the full amount of ${currency(amount_check)}?
  % endif
fields:
  - no label: demand_answer_check
    datatype: yesnoradio
#  - no label: demand_answer_check
#    input type: radio
#    choices:
#      - They have not paid me.: not_paid
#      - They have paid part of the amount: part_paid
#  - How much did they pay you?: partial_payment_amount
#    datatype: currency
#    max: ${amount_check}
#    show if: 
#      variable: demand_answer_check
#      is: "part_paid" 
---
id: demand answered kickout
event: demand_answered_kickout
question: |
  Sorry
subquestion: |
  % if other_parties.number_gathered() > 1: 
  You can only use this program if the defendants still owe you money.
  % else:
  You can only use this program if ${other_parties[0].name.full(middle='full')} still owea you money.
  % endif
  
  Click **Back** if you made a mistake. Or you can talk with a lawyer to discuss your options. Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
buttons:
  - Exit: exit
  - Restart: restart
---
id: claim reason
question: |
  % if other_parties.number_gathered() > 1:
  Why do the defendants owe you ${currency(amount_check)}?
  % else:
  Why does ${other_parties[0].name.full(middle='full')} owe you ${currency(amount_check)}?
  % endif
subquestion: |
  % if other_parties.number_gathered() > 1:
  Explain why the defendants owe you money. 
  % else:
  Explain why the ${other_parties[0].name.full(middle='full')} owes you money. 
  % endif
  
  Be specific. Include:
  
  * Dates, 
  * What happened, 
  * Whether any payments were made, 
  * Whether there was a contract, an agreement, or a receipt. 
  
  Remember you can only sue for money in Small Claims Court.
  
  The form has space for about 27 lines of text, or about 1,800 characters. If you need more room to explain, you can add an additional page. You can preview how your answer looks on the form on the next screen.

  ${collapse_template(help_reason)}
fields:
  - label: |
      % if other_parties.number_gathered() > 1:
      Explain why defendants owe you ${currency(amount_check)}:
      % else:
      Explain why ${other_parties[0].name.full(middle='full')} owes you ${currency(amount_check)}:
      % endif
    field: claim_reason
    input type: area
    rows: 16
    maxlength: 1800
  - note: After you click **Next**, the program will take a moment to make a preview of the page.
---
id: preview complaint
reconsider:
  - complaint['preview']
question: |
  Complaint page 2 preview
subquestion: |
  Click the image below to preview page 2 of your *Small Claims Complaint*.
  
  **Note: this is not a complete form.** Finish the program to get all your forms.
 
  ${ pdf_concatenate(complaint['preview'], filename="complaint-preview.pdf").extract_pages(first=2, last=2) }
  
  If you want to make changes, click **Back** or go to the [**About the case**](${ url_action('section_case') }) section. If you do not want to make changes or you need more space, click **Next**.
continue button field: preview_complaint
---
id: second page check generic
question: |
  % if landlord_check == False:
  % if other_parties.number_gathered() > 1:
  Do you want to add an additional page to explain why defendants owe you ${currency(amount_check)}?
  % else:
  Do you want to add an additional page to explain why ${other_parties[0].name.full(middle='full')} owes you ${currency(amount_check)}?
  % endif
  % else:
  % if other_parties.number_gathered() > 1:
  Do you want to add an additional page to explain why defendants owe you ${currency(calculated_deposit_claim)}?
  % else:
  Do you want to add an additional page to explain why ${other_parties[0].name.full(middle='full')} owes you ${currency(calculated_deposit_claim)}?
  % endif
  % endif
fields:
  - no label: add_second_page
    datatype: yesnoradio
---
template: help_reason
subject: |
  **Can I see some examples?**
content: |  
  "On April 21, ${int(format_date(today(), format="yyyy"))-1}, I agreed to sell my couch to my neighbor Fred Washington for $100. We agreed that Fred would pay me $100 within a week after receiving the couch. We wrote down the agreement. A copy of the agreement is attached. I gave Fred the couch on May 22, ${int(format_date(today(), format="yyyy"))-1}. He paid me $25 on June 1, ${int(format_date(today(), format="yyyy"))-1}. I asked him to pay the remaining $75 every week since then. He has not paid me the $75."

  "On June 3, ${int(format_date(today(), format="yyyy"))-1}, Julia Smith's dog bit me. I went to the emergency room to get treatment. The bill was for $568.90. I gave Julia a copy of the bill on August 3, ${int(format_date(today(), format="yyyy"))-1}. A copy of the bill is attached. I have asked Julia to pay me back for the hospital bill. She has not paid me."
---
id: more reason
question: |
   Additional explanation
subquestion: |
  % if other_parties.number_gathered() > 1:
  Explain why the defendants owe you ${currency(amount_check)}. 
  % else:
  Explain why ${other_parties[0].name.full(middle='full')} owes you ${currency(amount_check)}. 
  % endif
  
  Be specific. Include:
  
  * Dates, 
  * What happened, 
  * Whether any payments were made, 
  * Whether there was a contract, an agreement, or a receipt. 
  
  Remember you can only sue for money in Small Claims Court.
  
  The form has space for about 36 lines of text, or about 2,600 characters. You can preview how your answer looks on the forms on the next screen.
  
  ${collapse_template(reason_thus_far)}
fields:
  - Explanation (continued): more_reason
    input type: area
    rows: 16
    maxlength: 2600
  - note: After you click **Next**, the program will take a moment to make a preview of the page.
---
template: reason_thus_far
subject: |
  **Show me what I have already entered.**
content: |  
  ${claim_reason}
---
id: more deposit reason
question: |
  Additional explanation
subquestion: |
  % if landlord_check == False:
  % if other_parties.number_gathered() > 1:
  Add more reasons why the defendants owe you ${currency(amount_check)} below. 
  % else:
  Add more reasons why ${other_parties[0].name.full(middle='full')} owes you ${currency(amount_check)} below.
  % endif
  % else:
  % if other_parties.number_gathered() > 1:
  Add more reasons why the defendants owe you ${currency(calculated_deposit_claim)} below. 
  % else:
  Add more reasons why ${other_parties[0].name.full(middle='full')} owes you ${currency(calculated_deposit_claim)} below.
  % endif
  % endif
  
  Remember you can only sue for money in Small Claims Court.
  
  The form has space for about 37 lines of text, or about 2,400 characters. You can preview how your answer looks on the forms on the next screen.

  ${collapse_template(deposit_reason_thus_far)}
  
fields:
  - label: |
      % if landlord_check == False:
      % if other_parties.number_gathered() > 1:
      Continue explaining why defendants owe you ${currency(amount_check)}:
      % else:
      Continue explaining why ${other_parties[0].name.full(middle='full')} owes you ${currency(amount_check)}:
      % endif
      % else:
      % if other_parties.number_gathered() > 1:
      Continue explaining why defendants owe you ${currency(calculated_deposit_claim)}:
      % else:
      Continue explaining why ${other_parties[0].name.full(middle='full')} owes you ${currency(calculated_deposit_claim)}:
      % endif
      % endif
    field: more_deposit_reason
    input type: area
    rows: 16
    maxlength: 2400
  - note: After you click **Next**, the program will take a moment to make a preview of the page.
---
template: deposit_reason_thus_far
subject: |
  **Show me what I have already entered.**
content: |  
  ${deposit_claim_reason}
---
id: preview additional reasons
continue button field: preview_additional_reasons
reconsider:
  - complaint['preview']
  - additional_reasons['preview']
question: |
  Additional reasons preview
subquestion: |
  Click the images below to preview your Complaint form and your Additional reasons form.
  
  **Note: these are not complete forms.** Finish the program to get all your forms.
  
  ${ pdf_concatenate(complaint['preview'], filename="complaint-preview.pdf").extract_pages(first=2, last=2) }
  
  ${ pdf_concatenate(additional_reasons['preview'], filename="additional_reasons-preview.pdf").extract_pages() }
  
  If you want to make changes, click **Back** or go to the [**About the case**](${ url_action('section_case') }) section.
  
  If these look good, click **Next**.
---
id: preview additional deposit reasons
continue button field: preview_additional_deposit_reasons
reconsider:
  - additional_reasons['preview']
  - complaint['preview']
question: |
  Additional reasons preview
subquestion: |
  Click the images below to preview your Complaint form and your Additional reasons form.
  
  **Note: these are not complete forms.** Finish the program to get all your forms.
  
  ${ pdf_concatenate(complaint['preview'], filename="complaint-preview.pdf").extract_pages(first=2, last=2) }
 
  ${ pdf_concatenate(additional_reasons['preview'], filename="additional_reasons-preview.pdf").extract_pages() }
  
  If you want to make changes, click **Back** or go to the [**About the case**](${ url_action('section_case') }) section.
  
  If these look good, click *Next*.
---
depends on:
  - other_parties[i].person_type
code: |
  if other_parties[i].person_type != "business":
    other_parties[i].agent_check = False
  other_parties[i].person_catch = True
---
#This question should only be asked if a given defendant is a business.
id: defendant agent check
question: |
  Does ${other_parties[i].name.full(middle='full')} have a registered agent?
subquestion: |
  A registered agent is someone chosen by a business to receive court papers if the business is sued. You may be able to find this information from the [**Illinois Secretary of State**](https://apps.ilsos.gov/businessentitysearch/).
  
  Note: If ${other_parties[i].name.full(middle='full')} does not have a registered agent, be sure to include ${other_parties[i].name.full(middle='full')}'s owner as a defendant. You can add the owner by returning to the [**About the case**](${ url_action('section_case') }) section.
fields:
  - no label: other_parties[i].agent_check
    datatype: yesnoradio
---
id: defendant agent name
question: |
  Who is ${other_parties[i].name.full(middle='full')}'s registered agent?
subquestion: |
  You may be able to find this information from the [**Illinois Secretary of State**](https://apps.ilsos.gov/businessentitysearch/).
fields:
  - Registered agent: other_parties[i].agent.name.first
---
id: defendant same address
question: |
  % if other_parties[i].agent_check == True:
  Do you want to serve ${other_parties[i].agent.name.full(middle='full')} at ${other_parties[i].name.full(middle='full')}'s address?
  % else:
  Do you want to serve ${other_parties[i].name.full(middle='full')} at their address?
  % endif
subquestion: |
  ${other_parties[i].name.full(middle='full')}'s address is:
  
  ${other_parties[i].address.line_one(bare=True)}
  ${other_parties[i].address.line_two()}
  
  % if other_parties[i].agent_check == True:
  If ${other_parties[i].name.full(middle='full')} has listed a different address where they named ${other_parties[i].agent.name.full(middle='full')} as their registered agent on the [**Illinois Secretary of State**](www.ilsos.gov/corporatellc/) website, you must select **No** and then enter that address.
  % endif
field: other_parties[i].same_address
choices:
  - Yes: True
  - No, I want to enter a different address for service.: False
---
id: defendant service address
question: |
  % if other_parties[i].agent_check == True:
  Where will you serve ${other_parties[i].agent.name.full(middle='full')}?
  % else:
  Where will you serve ${other_parties[i].name.full(middle='full')}?
  % endif
subquestion: |
  % if other_parties[i].agent_check == True:
  Their address should be listed on ${other_parties[i].name.full(middle='full')}'s entry on the [**Illinois Secretary of State's website**](https://apps.ilsos.gov/businessentitysearch/).
  % endif
fields:
  - Street address: other_parties[i].service_address.address
    address autocomplete: True
  - Address line 2: other_parties[i].service_address.unit
    required: False
  - City: other_parties[i].service_address.city
  - State: other_parties[i].service_address.state
    code: |
      states_list()
  - ZIP code: other_parties[i].service_address.zip
---
id: defendant alt service
question: |
  % if other_parties[i].agent_check == True:
  Do you want to list an alternate address, phone number, or email for ${other_parties[i].agent.name.full(middle='full')}?
  % else:
  Do you want to list an alternate address, phone number, or email for ${other_parties[i].name.full(middle='full')}?
  % endif
subquestion: |
  Adding this information can help make sure ${other_parties[i].name.full(middle='full')} is served.
fields:
  - no label: other_parties[i].alt_delivery
    datatype: yesnoradio
---
id: defendant alt service address alt address
question: |
  % if other_parties[i].agent_check == True:
  What is the alternate address for ${other_parties[i].agent.name.full(middle='full')}?
  % else:
  What is the alternate address for ${other_parties[i].name.full(middle='full')}?
  % endif
subquestion: |
  If you do not have another address to enter, leave these blank.
fields:
  - Street address: other_parties[i].alt_service_address.address
    address autocomplete: True
    required: False
  - Address line 2: other_parties[i].alt_service_address.unit
    required: False
  - City: other_parties[i].alt_service_address.city
    required: False
  - State: other_parties[i].alt_service_address.state
    required: False
    code: |
      states_list()
  - ZIP code: other_parties[i].alt_service_address.zip
    required: False
---
id: defendant service contact
question: |
  % if other_parties[i].agent_check == True:
  What is ${other_parties[i].agent.name.full(middle='full')}'s contact information?
  % else:
  What is ${other_parties[i].name.full(middle='full')}'s contact information?
  % endif
subquestion: |
  If you do not know this, you can leave this blank.

  % if other_parties[i].agent_check == True:
  As a registered agent, ${other_parties[i].agent.name.full(middle='full')}'s contact information should be listed on ${other_parties[i].name.full(middle='full')}'s entry on the [**Illinois Secretary of State's website**](https://apps.ilsos.gov/businessentitysearch/).
  % endif
fields:
  - Phone number: other_parties[i].service_phone
    datatype: al_international_phone
    required: False
  - Email: other_parties[i].service_email
    datatype: email
    required: False
---
id: defendant alt contact
question: |
  % if other_parties[i].agent_check == True:
  What is ${other_parties[i].agent.name.full(middle='full')}'s alternate contact information?
  % else:
  What is ${other_parties[i].name.full(middle='full')}'s alternate contact information?
  % endif
subquestion: |
  If you do not have another phone number or email address to enter, leave these blank.
fields:
  - Phone number: other_parties[i].alt_service_phone
    datatype: al_international_phone
    required: False
  - Email: other_parties[i].alt_service_email
    datatype: email
    required: False
---
id: defendant service method
question: |
  % if other_parties[i].agent_check == True:
  How will you serve ${other_parties[i].agent.name.full(middle='full')}?
  % else:
  How will you serve ${other_parties[i].name.full(middle='full')}?
  % endif
subquestion: |
  In Small Claims Court, you can serve a defendant by:

  * Circuit Clerk (only for defendants in Illinois),
  * Sheriff, or
  * Special process server.
  
  To learn more, read ILAO's article on [**serving a summons**](https://www.illinoislegalaid.org/legal-information/serving-summons).
field: other_parties[i].service_method
choices:
  - Circuit Clerk (only for defendants in Illinois): clerk
  - Sheriff: sheriff
  - Special process server: server
  - I do not know yet.: unknown
---
template: signature_help
subject: |
  **What does it mean to sign the *Small Claims Complaint*?**
content: |  
  By signing your *Small Claims Complaint*, you are certifying that:
  
  * You read the form,
  * You believe it to be true and correct, and
  * You are not filing it for an improper purpose, such as to cause delay.

  See **[Illinois Supreme Court Rule 137](https://ilcourtsaudio.blob.core.windows.net/antilles-resources/resources/9ce1fce9-895f-463e-b87d-f9b7631f8fde/Rule%20137.pdf)** for more information.
---
id: next steps
continue button field: next_steps
question: |
  Completing the summons
subquestion: |
  You will need to ask the Circuit Clerk how the defendants must respond to your *Small Claims Complaint*. When you file your complaint, the clerk will give you:

  * A time and date for a hearing, and
  * Information on whether the hearing is in person or remote.

  Once the clerk gives you this information, put it in Section 3 of the *Summons* on page 2. 
  
  [FILE summons_snip.png, 100%, Summons hearing information]

  **Important:** The *Summons* is not ready for service until Section 3 is complete.
---
#This code block keeps track of the evidence a user said they would attach to their security deposit-related complaint. It creates a string used near the end of the interview to remind the user of each document to include.
depends on:
  - lease_check
  - lease_attach_check
  - deposit_payment_proof
  - demand_letter_attach
code: |
  if lease_check == True:
    if lease_attach_check == True and deposit_payment_proof == True and demand_letter_attach == True:
      which_evidence = "the lease agreement, proof you paid a security deposit, and the demand letter you sent to your landlord"
    elif lease_attach_check == True and deposit_payment_proof == True and demand_letter_attach == False:
      which_evidence = "the lease agreement and proof you paid a security deposit"
    elif lease_attach_check == True and deposit_payment_proof == False and demand_letter_attach == True:
      which_evidence = "the lease agreement and the demand letter you sent to your landlord"
    elif lease_attach_check == False and deposit_payment_proof == True and demand_letter_attach == True:
      which_evidence = "proof you paid a security deposit and the demand letter you sent to your landlord"
    elif lease_attach_check == True and deposit_payment_proof == False and demand_letter_attach == False:
      which_evidence = "the lease agreement"
    elif lease_attach_check == False and deposit_payment_proof == True and demand_letter_attach == False:
      which_evidence = "proof you paid a security deposit"
    elif lease_attach_check == False and deposit_payment_proof == False and demand_letter_attach == True:
      which_evidence = "the demand letter you sent to your landlord"
    else:
      which_evidence = "none"
  else:      
    if deposit_payment_proof == True and demand_letter_attach == True:
      which_evidence = "proof you paid a security deposit and the demand letter you sent to your landlord"
    elif deposit_payment_proof == True and demand_letter_attach == False:
      which_evidence = "proof you paid a security deposit"
    elif deposit_payment_proof == False and demand_letter_attach == True:
      which_evidence = "the demand letter you sent your landlord"
    else:
      which_evidence = "none"
---
reconsider: True
code: |
  if other_parties.number_gathered() > 1:
    defendant_defendants = "defendants"
  else:
    defendant_defendants = "defendant"
---
id: evidence
continue button field: evidence
question: |
  Evidence
subquestion: |
  % if landlord_check == True:
  % if which_evidence != "none":
  You said you would attach ${which_evidence} to your complaint. Make sure to include those documents when you file your claim. 
  % else:
  You can attach evidence of your claim to your complaint. Evidence can be things like paperwork or photos that show why a defendant owes you money.
  % endif
  % else:
  You can attach evidence of your claim to your complaint. Evidence can be things like paperwork or photos that show why a defendant owes you money.
  % endif
  
  Be sure to attach copies of your evidence to the forms you serve on the ${defendant_defendants}.

  **Note:** If you are e-filing, you can upload other documents as attachments during the e-filing process. If you are paper filing, bring copies of the documents to the clerk's office so you can attach them to the complaint.
---
id: service intro
continue button field: service_intro
question: |
  About service
subquestion: |
  % if other_parties.number_gathered() == 1:
  The next questions will ask about how you will serve ${other_parties[0].name.full(middle='full')} with the complaint and summons.
  
  To "serve" means to officially deliver court forms to a defendant. If your *Small Claims Complaint* is not served correctly, your case might be dismissed.
  % else:
  The next questions will ask about how you will serve each defendant with the complaint and summons.
  
  To "serve" means to officially deliver court forms to a defendant. If your *Small Claims Complaint* is not served correctly, your case might be dismissed.
  % endif
  
  To learn more, read ILAO's article on [**serving a summons**](https://www.illinoislegalaid.org/legal-information/serving-summons).
  
  ${collapse_template(help_business_service)}
---
template: help_business_service
subject: |
  **What if I am suing a business?**
content: |  
  If you are suing a business, you should check whether the business is incorporated and whether it has a registered agent.
  
  You can learn if a business is incorporated from the [**Illinois Secretary of State's website**](https://apps.ilsos.gov/businessentitysearch/). If you cannot find the business in this database, you will have to list the business's owner as another defendant.
  
  If the business is incorporated, they may have a registered agent listed on the [**Illinois Secretary of State's website**](https://apps.ilsos.gov/businessentitysearch/). If they have a registered agent, you will need to serve them. Some of the following questions will ask about registered agents.
---
id: move in date
question: |
  When did you move into the property?
fields:
  - Move-in date: move_in_date
    datatype: ThreePartsDate
    alMax: ${ today().format("yyyy-MM-dd") }
    #This max could certainly be earlier, but I am not certain when exactly.
---
id: moved out check
question: |
  Have you moved out of the property?
fields:
  - no label: moved_out
    datatype: yesnoradio
---
id: no move out kickout
event: no_move_kickout
question: |
  Sorry
subquestion: |
  Your landlord does not have to return your security deposit if you have not moved out of the property.
  
  To learn more, read ILAO's article on [**getting back a security deposit**](https://www.illinoislegalaid.org/legal-information/getting-back-security-deposit).
  
   Click **Back** if you made a mistake. Or you can talk with a lawyer to discuss your options. Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
buttons:
  - Exit: exit
  - Restart: restart
---
id: move out date
question: |
  When did you move out of the property?
fields:
  - Move-out date: move_out_date
    datatype: ThreePartsDate
    alMax: ${ today().format("yyyy-MM-dd") }
    alMin: ${ move_in_date}
---
id: demand letter check
question: |
  Have you sent a letter to your former landlord asking them to return your security deposit?
fields:
  - no label: demand_letter_check
    datatype: yesnoradio
---    
id: no demand kickout
event: no_demand_kickout
question: |
  Sorry
subquestion: |
  You have to send a demand letter to your former landlord before suing for your security deposit.

  To make a demand letter, you can use ILAO's [**Security deposit demand letter Easy Form**](https://www.illinoislegalaid.org/legal-information/security-deposit-demand-letter).

   Click **Back** if you made a mistake. Or you can talk with a lawyer to discuss your options. Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
buttons:
  - Exit: exit
  - Restart: restart
---
id: demand letter date
question: |
  When did you send a demand letter to your landlord?
subquestion: |
  You should attach a copy of the letter to your *Small Claims Complaint*.
fields:
  - Sent date: demand_letter_date
    datatype: ThreePartsDate
    alMax: ${ today().format("yyyy-MM-dd") }
    #alMin: ${move_out_date.minus(months=3)}
    #Can the demand letter be sent before moving out? If not, this min should be changed to the move out date.
validation code: |
  if date_difference(starting=move_out_date, ending=demand_letter_date).days < 0:
    validation_error(word("You can not enter a date before you moved out of the rental unit."))
---    
id: apartment city
question: |
  What city was the rental property in?
subquestion: |
  Some cities have local laws about security deposits.
field: apartment_city
choices:
  - Chicago
  - DeKalb
  - Evanston
  - Mount Prospect
  - Oak Park
  - Urbana
  - None of the above
---
id: municipal law intro
continue button field: municipal_intro
question: |
  Local landlord-tenant law
subquestion: |
  % if rental_address.city.lower() != "chicago" and rental_address.city.lower() != "dekalb" and rental_address.city.lower() != "evanston" and rental_address.city.lower() != "mount prospect" and rental_address.city.lower() != "oak park" and rental_address.city.lower() != "urbana":
  Cook County has laws that affect landlord and tenant relationships and security deposits.
  % else:
  ${rental_address.city} has laws that affect landlord and tenant relationships and security deposits.
  % endif
  
  This program will help you in most situations. You may want to [**Get Legal Help**](https://www.illinoislegalaid.org/get-legal-help) to learn more about what you can do in your situation.
---
id: cook county question
question: |
  Is the rental property in Cook County?
fields:
  - no label: cook_county_check
    datatype: yesnoradio
---
depends on:
  - rental_address.city
  - rental_address.county
id: property type check
question: |
  Is the rental property one of the following?
subquestion: |
  % if rental_address.city.lower() == "chicago":
  * A medical, educational, or relgious facility,
  * A hotel or motel,
  * Something you have signed a contract to buy,
  * A place you had to rent because the landlord is your employer, and the job required you to rent there, or
  * A co-op
  % elif rental_address.city.lower() == "dekalb":
  * A medical, educational, or relgious facility,
  * A hotel or motel,
  * Government-owned, or
  * A rooming house
  % elif rental_address.city.lower() == "evanston":
  * A medical, educational, or relgious facility,
  * A hotel or motel,
  * A fraternity or social organization,
  * Something you have signed a contract to buy,
  * A co-op, or
  * An educational institution
  % elif rental_address.city.lower() == "mount prospect":
  * A medical, educational, or relgious facility,
  * A residential care home,
  * A hotel or motel, or
  * Something you have signed a contract to buy
  % elif rental_address.city.lower() == "oak park":
  * A hotel or motel,
  * A medical, educational, or relgious facility,
  * A school dormitory,
  * A temporary or transitional shelter,
  * A place you had to rent because the landlord is your employer, and the job required you to rent there
  % elif rental_address.city.lower() == "urbana":
  * A medical, educational, or relgious facility,
  * A hotel or motel,
  * A fraternity or social organization,
  * Something you have signed a contract to buy, or
  * A place you had to rent because the landlord is your employer, and the job required you to rent there
  % elif end_in_county(rental_address.county).lower() == "cook county":
  * A hotel or motel,
  * A school dormitory,
  * A shelter or a single-room-occupancy (SRO),
  * A place you had to rent because the landlord is your employer, and the job required you to rent there, or
  * An owner-occupied co-op
  % endif
fields:
  - no label: property_type_check
    datatype: yesnoradio
---
#This sets property_type_check to False if the applicable law Illinois' Security Deposit Return Act. This is done in a code block so that if the user changes the rental address's location and a different statute applies the property_type_check value will be wiped and the actual property_type_check question will be asked instead.
depends on:
  - rental_address.city
  - rental_address.county
code: |
  if rental_address.city.lower() != "chicago" and rental_address.city.lower() != "dekalb" and rental_address.city.lower() != "evanston" and rental_address.city.lower() != "mount prospect" and rental_address.city.lower() != "oak park" and rental_address.city.lower() != "urbana" and end_in_county(rental_address.county).lower() != "cook county":
    property_type_check = False
  else:
    property_type_check
  property_type_code = True
---
id: owner occupant check
question: |
  Does the landlord live in one of the units on the property?
subquestion: |
  This only applies to a landlord who owns the property. If a property manager lives in one of the units but not the property's owner, you should click **No**.
fields:
  - no label: owner_occupant
    datatype: yesnoradio
---
id: cook family check
question: |
  Landlord question
subquestion: |
  Is the property a single-family home or condominium where:
  
  * The landlord is only renting that one rental property, and
  * The landlord or an immediate family member has lived in the home within the year?
fields:
  - no label: cook_family_check
    datatype: yesnoradio
---
#id: chicago owner occupant check
#question: |
#  Does the landlord live in one of the units on the property?
#subquestion: |
#  This only applies to a landlord who owns the property. If a property manager lives in one of the units but not the property's owner, you should click **No**.
#fields:
#  - no label: chicago_owner_occupant
#    datatype: yesnoradio
---
id: rental address
question: |
  What is the rental property's address?
fields:
  - Street address: rental_address.address
    address autocomplete: True
  - Address line 2: rental_address.unit
    required: False
  - City: rental_address.city
  #  default: |
  #    % if apartment_city != "None of the above":
  #    ${apartment_city}
  #    % else:
  #    
  #    % endif
  - State: rental_address.state
    code: |
      states_list()
  - ZIP code: rental_address.zip
  - County: rental_address.county
---
id: merged unit number general
question: |
  How many units are in the property?
field: unit_number_general
choices:
  - 4 or fewer units: too_few_for_illinois
  - 5 or 6 units: depends_on_area
  - 7 or more units: enough_anywhere
  - I do not know.: dont_know
---
#This code determines which ordinance would apply to a given rental property and whether that property falls under any of the ordinance's exclusions. What rental units are covered vary between jurisdictions. All jurisdictions--save Illinois writ large--exclude certain types of property, whereas some jurisdictions exclude units in a property occupied by the owner with fewer than X units. Cook County has an additional quirk documented in the interview code block.
#It is worth noting that this code alone does not determine whether the user can get "bonus" damages. That also can depend on other code dealing with the landlord's post move out actions. (Although as of March 2024 prior to SME review, I suspect that the landlord action code will become more influential. Currently it doesn't have much impact on the "bonus" damages calculation.)
depends on:
  - rental_address.county
  - rental_address.city
  - property_type_check
  - owner_occupant
  - cook_family_check
  - unit_number_general
code: |
  if rental_address.city.lower() == "urbana": 
    if property_type_check == True:
      rlto_applies = False
    else:
      rlto_applies = True
    which_rlto = "Urbana"
  elif rental_address.city.lower() == "mount prospect":
    if property_type_check == True:
      rlto_applies = False
    else:
      rlto_applies = True
    which_rlto = "Mount Prospect"
    rlto_applies = False
  elif rental_address.city.lower() == "chicago":
    which_rlto = "Chicago"
    if property_type_check == True:
      rlto_applies = False
    else:
      if owner_occupant == True:
        if unit_number_general == "too_few_for_illinois" or unit_number_general == "depends_on_area":
          rlto_applies = False
        else:
          rlto_applies = True         
      else:
        rlto_applies = True
  elif rental_address.city.lower() == "oak park":
    which_rlto = "Oak Park"
    if property_type_check == True:
      rlto_applies = False
    else:
      if owner_occupant == True:
        if unit_number_general == "too_few_for_illinois":
          rlto_applies = False
        else:
          rlto_applies = True
      else:
        rlto_applies = True
  elif rental_address.city.lower() == "evanston":
    which_rlto = "Evanston"
    if property_type_check == True:
      rlto_applies = False
    else:  
      rlto_applies = True    
  elif end_in_county(rental_address.county).lower() == "cook county":
    which_rlto = "Cook County"
    if property_type_check == True:
      rlto_applies = False
    else:  
      if owner_occupant == True:
        if unit_number_general == "depends_on_area" or unit_number_general == "too_few_for_illinois":
          rlto_applies = False
        else:
          rlto_applies = True
      else:
        if cook_family_check == True:
          rlto_applies = False
        else:
          rlto_applies = True
  else:
    which_rlto = "Illinois"
    if property_type_check == True:
      rlto_applies = False
    else:  
      rlto_applies = True
---
id: rlto note
continue button field: rlto_note
question: |
  Local landlord-tenant law
subquestion: |
  % if rlto_applies == True:
  % if which_rlto == "Urbana":
  Based on your answers, the city of Urbana's code of ordinances may apply to the rental property.
  % elif which_rlto == "Mount Prospect":
  Based on your answers, Mount Prospect's residential landlord and tenant regulations may apply to the rental property. Mount Prospect does not allow for extra damages.
  % elif which_rlto == "Evanston":
  Based on your answers, the City of Evanston's landlord and tenant regulations may apply to the rental property.
  % elif which_rlto == "Chicago":
  Based on your answers, the City of Chicago's Residential Landlord Tenant Ordinance may apply to the rental property.
  % elif which_rlto == "Oak Park":
  Based on your answers, Oak Park's Residential Tenant and Landlord Ordinance may apply to the rental property.
  % elif which_rlto == "DeKalb":
  Based on your answers, DeKalb's Landlord-Tenant Regulations may apply to the rental property.
  % elif which_rlto == "Cook County":
  Based on your answers, Cook County's Residential Tenant Landlord Ordinance may apply to the rental property.
  % elif which_rlto == "Illinois":
  Based on your answers, Illinois's Security Deposit Return Act may apply to the rental property.
  % endif
  % else:
  % if which_rlto == "Chicago":
  The City of Chicago has a Residential Landlord Tenant Ordinance, but it may not apply to the rental property. Illinois state law may apply to your case.
  % elif which_rlto == "Evanston":
  The City of Evanston has a Residential Landlord and Tenant Ordinance, but it may not apply to the rental property. Illinois state law may apply to your case.
  % elif which_rlto == "Urbana":
  The city of Urbana's code of ordinances may not apply to the rental property. Illinois state law may apply to your case.
  % elif which_rlto == "Oak Park":
  Oak Park has a Residential Tenant and Landlord Ordinance, but it may not apply to the rental property. Illinois state law may apply to your case.
  % elif which_rlto == "DeKalb":
  DeKalb's Landlord-Tenant Regulations may not apply to the rental property. Illinois state law may apply to your case.
  % elif which_rlto == "Mount Prospect":
  Mount Prospect's residential landlord and tenant regulations may apply to the rental property. Mount Prospect does not allow for extra damages.
  % elif which_rlto == "Cook County":
  Cook County has a Residential Tenant Landlord Ordinance, but it may not appliy to the rental property. Illinois state law may apply to your case.
  % else:
  Based on your answers, Illinois state law may apply to your case.
  % endif
  % endif
---
#Different ordinances give landlords different deadlines for returning a deposit or sending a damages letter. These deadlines are X days after the tenant vacates the unit. These variable values are used elsewhere to determine if the landlord has more time to return the deposit and whether the damages letter they sent was timely.
depends on:
  - rental_address.city
  - rlto_applies
  - rental_address.county
  - move_out_date
code: |
  if rlto_applies == True:
    if rental_address.city.lower() == "evanston":
      days_to_return_deposit = 21
      days_to_receive_letter = 21
      
    elif rental_address.city.lower() == "oak park":
      days_to_return_deposit = 30
      days_to_receive_letter = 30
    elif rental_address.city.lower() == "mount prospect":
      days_to_return_deposit = 45
      days_to_receive_letter = 30
    elif rental_address.city.lower() == "dekalb":
      days_to_return_deposit = 45
      days_to_receive_letter = 30
    elif rental_address.city.lower() == "chicago":
      days_to_return_deposit = 45
      days_to_receive_letter = 30
    elif rental_address.city.lower() == "urbana":
      days_to_return_deposit = 45
      days_to_receive_letter = 30
    elif end_in_county(rental_address.county).lower() == "cook county":
      days_to_return_deposit = 30
      days_to_receive_letter = 30
    else:
      days_to_return_deposit = 45
      days_to_receive_letter = 30
  else:
    days_to_return_deposit = 45
    days_to_receive_letter = 30
  return_deadline = move_out_date.plus(days=days_to_return_deposit)
  damage_deadline = move_out_date.plus(days=days_to_receive_letter)
---
#See documentation for above block
depends on:
  - return_deadline
  - damage_deadline
code: |
  return_date_diff_reference = date_difference(starting=return_deadline, ending=today())
  damage_date_diff_reference = date_difference(starting=damage_deadline, ending=today())
---
id: landlord time kickout
event: landlord_time_kickout
question: |
  Sorry
subquestion: |
  % if return_date_diff_reference.days < 0 and damage_date_diff_reference.days < 0:
  % if damage_deadline != return_deadline:
  Your landlord has until ${return_deadline} to return your security deposit or until ${damage_deadline} to send you a letter describing any damage to the rental unit.
  % else:
  Your landlord has until ${return_deadline} to return your security deposit or to send you a letter describing any damage to the rental unit.
  % endif
  % elif return_date_diff_reference.days < 0:
  Your landlord has until ${return_deadline} to return your security deposit.
  % elif damage_date_diff_reference.days < 0:
  Your landlord has until ${damage_deadline} to send you a letter describing any damage to the rental unit.
  % endif

  Run this program on or after ${return_deadline} to make your *Small Claims Complaint*.
  
  To learn more, read ILAO's gude to [**Getting or returning a security deposit**](https://www.illinoislegalaid.org/legal-information/getting-or-returning-security-deposit).
  
   Click **Back** if you made a mistake. Or you can talk with a lawyer to discuss your options. Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
buttons:
  - Exit: exit
  - Restart: restart
---
id: landlord deadline
continue button field: landlord_deadline
question: |
  Landlord's deadline
subquestion: |
  Based on the law that applies to the rental unit and your move out date, the landlord had until ${return_deadline} to return your security deposit.

  The next questions will help you figure out the amount you can sue for in your *Small Claims Complaint*.
---
id: security deposit amount
question: |
  % if i == 0:
  How much did you pay for the security deposit?
  % elif i == 1:
  How much was the second payment?
  % else:
  What was the total of the remaining security deposit payments?
  % endif
subquestion: |
  % if i == 0:
  If you made multiple payments, enter the amount of your first payment.
  % elif i == 2:
  If you only made three payments, enter the amount of third payment. If you made more than three payments, enter the total of the remaining payments.
  % endif
fields:
  - Security deposit payment: deposit_payments[i]
    datatype: currency
    min: 0
---
id: deposit pay date 
question: |
  % if i == 0:
  When did you make the payment of ${currency(deposit_payments[i])}?
  % elif i == 1:
  When did you make the second payment of ${currency(deposit_payments[i])}?
  % elif i == 2:
  When did you make the final security deposit payment?
  % endif
fields:
  - Payment date: deposit_dates[i]
    datatype: ThreePartsDate
    alMax: ${ today().format("yyyy-MM-dd") }
    alMin: ${move_in_date.minus(months=12)}
---
id: another payment check
question: |
  Did you make another security deposit payment?
subquestion: |
  % if i == 0:
  So far you have told us about one payment of ${currency(deposit_payments[i])}.
  % elif i == 1:
  So far you have told us about a first payment of ${currency(deposit_payments[0])} and a second payment of ${currency(deposit_payments[1])}.
  % endif
fields:
  - no label: another_deposit[i]
    datatype: yesnoradio
---
id: partial return check
question: |
  Did your landlord return part of your security deposit?
fields:
  - no label: partial_return_check
    datatype: yesnoradio
---
id: partial return amount
question: |
  How much did of the security deposit did your landlord give back to you?
subquestion: |
  If your landlord paid you back in parts, enter the total amount returned.
fields:
  - Amount returned: partial_return_amount
    datatype: currency
    min: 0
---
id: chicago fire
continue button field: chicago_fire
question: |
  Fire and natural disasters
subquestion: |
  If you had to move out due to a fire or natural disaster, you may want to talk to a lawyer about your options.
  
  Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
---
id: partial return date
question: |
  When did your landlord give back part of your security deposit?
subquestion: |
  If your landlord paid you back in parts, enter the date of the most recent payment.
fields:
  - Date returned: partial_return_date
    datatype: ThreePartsDate
    alMax: ${ today().format("yyyy-MM-dd") }
    alMin: ${deposit_dates[0]}
---
#Tenants may have paid security deposit in installments. A landlord may have returned a portion of the security deposit. This uses the list of payments--deposit_payments--and the amount the landlord returned--partial_return_amount--to calculate the total deposit_balance_owed
#reconsider: True
depends on:
  - deposit_payments[0]
  - deposit_payments[1]
  - deposit_payments[2]
  - another_deposit[0]
  - another_deposit[1]
  - partial_return_check
  - partial_return_amount
code: |
  deposit_balance_owed = deposit_payments[0]
  if another_deposit[0] == True:
    deposit_balance_owed = deposit_balance_owed + deposit_payments[1]
    if another_deposit[1] == True:
      deposit_balance_owed = deposit_balance_owed + deposit_payments[2]
  total_deposit = deposit_balance_owed
  if partial_return_check == True:
    deposit_balance_owed = deposit_balance_owed - partial_return_amount
---
id: deposit balance still owed
continue button field: deposit_still_owed
question: |
  Amount of security deposit owed
subquestion: |
  According to your answers, your landlord has not returned ${currency(deposit_balance_owed)} of your security deposit.
---
id: all paid error
event: all_paid_error
question: |
  Sorry
subquestion: |
  According to your answers, your landlord had paid back your security deposit

  Click **Back** or **Restart** if you reached this page by mistake.
buttons:
  - Exit: exit
  - Restart: restart
---
id: statement of damages
question: |
  Did your landlord send you a letter saying they need money from your security deposit to make repairs?
subquestion: |
  The letter should include a statement of damages that explains what repairs your landlord had to make to the rental unit and how much each repair cost. If the letter does not say what repairs your landlord had to make or what they cost, you can click **No** here.

  **Note:** If your landlord can prove they paid for repairs to the unit, you might not be able to get back the full security deposit. The judge will decide if your landlord was right to use the security deposit to pay for repairs.
fields:
  - no label: damages_check
    datatype: yesnoradio
---
id: damage statement date
question: |
  When did you receive the statement of damages from your landlord?
fields:
  - Statement date: damages_date
    datatype: ThreePartsDate
    alMax: ${ today().format("yyyy-MM-dd") }
    alMin: ${move_out_date}
---
id: dispute deduction info
question: |
  About repairs
subquestion: |
  
---
#The landlord_timely variable tracks whether the landlrod is timely with sending the statement of damages
depends on:
  - rlto_applies
  - rental_address.city
  - move_out_date
  - damages_check
  - damages_date
code: |
  if rlto_applies == True:
    # if the landlord did not send a damages letter at all, the landlord is not timely with their damages letter!
    if damages_check == False:
      landlord_timely = False
    else:
      damage_date_difference = date_difference(starting=move_out_date, ending=damages_date)
      if rental_address.city.lower() == "evanston":
        
        if damage_date_difference.days > 21:
          landlord_timely = False
        else:
          landlord_timely = True
      elif rental_address.city.lower() == "oak park":
        if damage_date_difference.days > 30:
          landlord_timely = False
        else:
          landlord_timely = True
      elif rental_address.city.lower() == "mount prospect" or rental_address.city.lower() == "dekalb":
        if damage_date_difference.days > 45:
          landlord_timely = False
        else:
          landlord_timely = True
      elif rental_address.city.lower() == "chicago":
        if damage_date_difference.days > 30:
          landlord_timely = False
        else:
          landlord_timely = True
      else:
        if damage_date_difference.days > 30:
          landlord_timely = False
        else:
          landlord_timely = True
  else:
    #the value of landlord_timely should not matter if rtlo_applies is False
    landlord_timely = True
---
#If the unit does not fall under the landlord's exclusions and the landlord did not timely send a damages letter, then the tenant can get extra damages. Wait... some jurisdictions don't allow extra damages? Did I put that catch in the default text generation code? Oy.
depends on:
  - landlord_timely
  - rlto_applies
  - rental_address.city
  - rental_address.county
code: |
  if rlto_applies == True:
    if landlord_timely == False:
      extra_damages = True
    else:
      extra_damages = False
  else:
    extra_damages = False
---
#see documentation for code above. I don't know why I made this and the above block separate blocks, but I am not foolhardy enough to pull unnecessarily on the spaghetti code.
#reconsider: True
depends on:
  - total_deposit
  - deposit_balance_owed
  - deposit_payments[0]
  - deposit_payments[1]
  - deposit_payments[2]
  - another_deposit[0]
  - another_deposit[1]
  - extra_damages
code: |
  if extra_damages == True:
    deposit_with_damages = deposit_balance_owed + deposit_balance_owed
  else:
    deposit_with_damages = deposit_balance_owed
---
id: deposit debug screen
continue button field: deposit_debug
question: |
  Deposit debug
subquestion: |
  rlto_applies value is ${rlto_applies}
  
  the total deposit paid is ${total_deposit}
  
  deposit balance owed is ${deposit_balance_owed}
  
  the extra_damages check is ${extra_damages}
  
  deposit with damages (which should only include total deposit x 2 plus balance owed if extra_damages is true) is ${deposit_with_damages}
  
  calculated_deposit_claim is the variable used in the templates. It is ${calculated_deposit_claim}
---
id: security deposit damages info
continue button field: deposit_damages_info
question: |
  Damages
subquestion: |
  % if extra_damages:
  Because your landlord did not return your full security deposit on time, you can sue for ${currency(calculated_deposit_claim)}. This amount is double ${currency(deposit_balance_owed)}, the amount of security deposit not yet returned.
  % else:
  You can sue for ${currency(deposit_balance_owed)}, the amount of your security deposit that hasn't been returned. No additional damages apply.
  % endif
  
  % if lets_stay_small:
  In order to stay in Small Claims Court, you can only sue for $10,000.
  
  % endif
  **Note:** If you win your case, the landlord can reduce the amount they owe if they prove that:

  * You owe rent, or
  * You damaged the property and the landlord provided proof of repairs or an estimate.
---
#This is a flag that catches if the deposit amount owed plus damages is too great to be litigated in small claims court. If it is, this leads to a kickout.
reconsider: True
only sets: 
  - amount_updated
  - calculated_deposit_claim
  - lets_stay_small
depends on:
  - deposit_with_damages
  - deposit_balance_owed
  - extra_damages
  - total_deposit
  - deposit_payments[0]
  - deposit_payments[1]
  - deposit_payments[2]
code: |
  lets_stay_small = False
  calculated_deposit_claim = deposit_with_damages
  if deposit_with_damages > 10000:
    lets_stay_small = True
    deposit_damages_too_big
    
  amount_updated = True
---
id: deposit too big
continue button field: too_much_owed
question: |
  Your claim can not be more than $10,000
subquestion: |
  Your claim amount is at least ${currency(deposit_balance_owed)}. You can only sue for $10,000 or less in Small Claims Court.
  
  To learn more about your other options, read ILAO's article on [**starting a lawsuit**](https://www.illinoislegalaid.org/legal-information/starting-lawsuit-0).
  
   Click **Back** if you made a mistake. Or you can talk with a lawyer to discuss your options. Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
   
  If you would like to file for only $10,000 to remain in Small Claims Court, you can click **Next**.
---
id: deposit damages too big kickout
continue button field: deposit_damages_too_big
question: |
  Your claim can not be more than $10,000
subquestion: |
  With damages, your claim amount is ${currency(calculated_deposit_claim)}. You can only sue for $10,000 or less in Small Claims Court.
  
  To learn more about your other options, read ILAO's article on [**starting a lawsuit**](https://www.illinoislegalaid.org/legal-information/starting-lawsuit-0).
  
   Click **Back** if you made a mistake. Or you can talk with a lawyer to discuss your options. Use **[Get Legal Help](https://www.illinoislegalaid.org/get-legal-help)** to find free or low-cost legal services in your area.
   
  If you would like to file for only $10,000 to remain in Small Claims Court, you can click **Next**.
---
id: lease check
question: |
  Did you have a written lease with your landlord?
subquestion: |
  If you had a written lease, you should click **Yes** even if you lost your copy.
fields:
  - no label: lease_check
    datatype: yesnoradio
---
id: lease attach check
question: |
  Will you attach a copy of the lease agreement to your *Small Claims Complaint*?
subquestion: |
  If you have a written lease, you should attach a copy of it to your *Small Claims Complaint* as an exhibit.

  If you cannot attach the written lease, you can explain why on the next screen.  
fields:
  - no label: lease_attach_check
    datatype: yesnoradio
---
id: no lease attachment explanation
question: |
   Why can't you attach a copy of your lease agreement to your *Small Claims Complaint*?
fields:
  - Explanation: lease_attach_explain
    input type: area
    rows: 2
    maxlength: 175
---
id: deposit payment proof
question: |
  Will you attach proof that you paid a security deposit of ${currency(total_deposit)} to your *Small Claims Complaint*?
subquestion: |
  % if another_deposit[0] == True:
  ${currency(total_deposit)} is the total you said you paid in security deposits.
  
  % endif
  It will be easier to show the judge that you paid if you attach receipts or other statements.
fields:
  - no label: deposit_payment_proof
    datatype: yesnoradio
---
id: demand letter attach
question: |
  Will you attach a copy of the demand letter you sent on ${demand_letter_date} to your *Small Claims Complaint*?
subquestion: |
  It will be easier to show the judge that you asked for payment if you attach the letter.
fields:
  - no label: demand_letter_attach
    datatype: yesnoradio
---
id: dispute withholding
question: |
  Do you agree with the amount the landlord said was needed to make repairs?
fields:
  no label: dispute_withholding
  datatype: yesnoradio
---
id: paragraph number debug
continue button field: made_it_this_far
question: |
  Made it this far!
---
#This is the meatiest code block in the program. It creates the default claim text for the user. Despite its length, it should be relatively straight forward.
reconsider: True
depends on:
  - rental_address
  - other_parties
  - rental_address.city
  - move_in_date
  - total_deposit
  - deposit_payments
  - deposit_payment_proof
  - move_out_date
  - demand_letter_date
  - demand_letter_attach
  - partial_return_check
  - partial_return_amount
  - days_to_return_deposit
  - rlto_applies
  - rental_address.county
  - amount_check
  - deposit_payments[0]
  - deposit_payments[1]
  - deposit_payments[2]
  - deposit_dates[0]
  - deposit_dates[1]
  - deposit_dates[2]
  - another_deposit[0]
  - another_deposit[1]
  - lets_stay_small
code: |
  #paragraph number variable must increment with each paragraph break, i.e. the \n \n lines.
  paragraph_number = 1
  
  default_deposit_claim_reason = str(paragraph_number) + ". I rented a residential unit at " + rental_address.on_one_line(bare=True) + " from " + comma_and_list(other_parties) + ". "
  
  default_deposit_claim_reason += "\n" + "\n"
  paragraph_number += 1
      
  default_deposit_claim_reason += str(paragraph_number) + ". I moved into the property on " + move_in_date + ". "
    
  
  if another_deposit[0] == False:
    default_deposit_claim_reason += "I paid " + comma_and_list(other_parties) + " a total of " + currency(total_deposit) + " on " + deposit_dates[0] + " as a security deposit. "
  else:
    default_deposit_claim_reason += "I paid " + comma_and_list(other_parties) + " a total of " + currency(total_deposit) + " as a security deposit. On " + deposit_dates[0] + ", I paid " + currency(deposit_payments[0]) + ". On " + deposit_dates[1] + ", I paid " + currency(deposit_payments[1]) + ". "
    if another_deposit[1] == True:
      default_deposit_claim_reason += "On " + deposit_dates[2] + ", I paid " + currency(deposit_payments[2]) + ". "    
  if deposit_payment_proof == True:
    default_deposit_claim_reason += "Proof showing that I paid the security deposit is attached" + ".\n" + "\n"
  else:
    default_deposit_claim_reason += ".\n" + "\n"
  paragraph_number += 1
    
  default_deposit_claim_reason += str(paragraph_number) + ". I moved out of the unit on " + move_out_date + ". "  

  default_deposit_claim_reason += "I sent a letter demanding return of my security deposit to " + comma_and_list(other_parties) + " on " + demand_letter_date + ". "
  if demand_letter_attach == True:
    default_deposit_claim_reason += "A copy of the letter is attached. "
  default_deposit_claim_reason += "\n" + "\n"
  paragraph_number += 1
  
  if partial_return_check ==  False:
    default_deposit_claim_reason += str(paragraph_number) + ". As of " + today() + " " + comma_and_list(other_parties) + " had returned $0 of the security deposit" + ".\n" + "\n"
  else:
    default_deposit_claim_reason += str(paragraph_number) + ". As of " + today() + " " + comma_and_list(other_parties) + " had returned " + currency(partial_return_amount) + " of the security deposit" + ".\n" + "\n"
  paragraph_number += 1

  if damages_check == False:
    default_deposit_claim_reason += str(paragraph_number) + ". As of " + today() + " I have not received a letter from " + comma_and_list(other_parties) + " with a statement of damages the security deposit was used to repair" + ".\n" + "\n"
    paragraph_number += 1
  else:
    if landlord_timely == False:
      default_deposit_claim_reason += str(paragraph_number) + ". I received a letter from " + comma_and_list(other_parties) + " on " + damages_date + " saying they would use some or all of my security deposit to make repairs to the rental unit, but I did not receive this letter within "
      if rental_address.city.lower() == "evanston":
        default_deposit_claim_reason += "21 days of vacating the property" + ".\n" + "\n"
      elif rental_address.city.lower() == "mount prospect" or rental_address.city.lower() == "dekalb":
        default_deposit_claim_reason += "45 days of vacating the property" + ".\n" + "\n"
      elif rental_address.city.lower() == "chicago":
        default_deposit_claim_reason += "30 days of vacating the property as required by Section 5-12-080(d)(2) of the municipal code of Chicago" + ".\n" + "\n"
      elif rental_address.city.lower() == "urbana":
        default_deposit_claim_reason += "30 days of vacating the property as required by Section 12.5-20(a) of Urbana's code of ordinances " + ".\n" + "\n"
      else:
        default_deposit_claim_reason += "30 days of vacating the property" + ".\n" + "\n"
    else:
      default_deposit_claim_reason += str(paragraph_number) + ". I received a letter from " + comma_and_list(other_parties) + " on " + damages_date + " saying they would use some or all of my security deposit to make repairs to the rental unit."
      if not dispute_withholding:
        default_deposit_claim_reason +=  " I dispute that this was a reasonable amount necessary to repair damage."
      default_deposit_claim_reason += "\n" + "\n"
    paragraph_number += 1
    
  default_deposit_claim_reason += str(paragraph_number) + ". " + comma_and_list(other_parties) + " failed to return " + word(currency(deposit_balance_owed)) + " within " + word(days_to_return_deposit) + " days after I vacated the property. "
  
  #In the a2jauthor interview there is logic at this point regarding the damages letter. I will look into whether we should include that later; it appears to be deprecated in the old program.
  
  if extra_damages:
    if rental_address.city.lower() != "chicago" and rental_address.city.lower() != "dekalb" and rental_address.city.lower() != "evanston" and rental_address.city.lower() != "mount prospect" and rental_address.city.lower() != "oak park" and rental_address.city.lower() != "urbana" and end_in_county(rental_address.county).lower() == "cook county":
      default_deposit_claim_reason += "Per Sec. 42-111(m) of the Cook County code of ordinances, I can be awarded damages in an amount equal to two times the security deposit. "
    
    elif rental_address.city.lower() == "chicago":
      default_deposit_claim_reason += "Per Section 5-12-080(f) of the municipal code of Chicago, I can be awarded damages in an amount equal to two times the security deposit plus interest. "
    elif rental_address.city.lower() == "dekalb":
      default_deposit_claim_reason += "Per Section 10.14(a) of the municipal code of DeKalb, " + comma_and_list(other_parties) + " can be liable for an amount equal to twice the amount of the security deposit due, together with court costs. "
    elif rental_address.city.lower() == "evanston":
      default_deposit_claim_reason += "Per Section 5-3-5-1(F) of Evanston's code of ordinances, I may recover damages in an amount equal to twice the amount wrongfully withheld. "
    elif rental_address.city.lower() == "mount prospect":
      default_deposit_claim_reason += "Per Section 23.1806(A)(5) of Mount Prospect's code of ordinances, I may recover the money due. "
    elif rental_address.city.lower() == "oak park":
      default_deposit_claim_reason += "Per Section 12-4-1 of Oak Park's code of ordinances, " + comma_and_list(other_parties) + " can be liable for an amount equal to twice the amount of the security deposit due, together with court costs. "
    elif rental_address.city.lower() == "urbana":
      default_deposit_claim_reason += "Per Section 12.5-20(b) of Urbana's code of ordinances, " + comma_and_list(other_parties) + " can be liable for an amount equal to twice the amount of the security deposit due, together with court costs. "
    else:
      default_deposit_claim_reason += "Per Section 1(c) of the Security Deposit Return Act, " + comma_and_list(other_parties) + " can be liable for an amount equal to twice the amount of the security deposit due, together with court costs. "
      
  default_deposit_claim_reason += "\n" + "\n"
  paragraph_number += 1
      
  if showifdef('lets_stay_small') == True:
    default_deposit_claim_reason += str(paragraph_number) + ". I am asking this court to order " + comma_and_list(other_parties) + " to pay me $10,000. In order to file this claim in Small Claims Court, I am not seeking damages greater than $10,000."
  else:
    default_deposit_claim_reason += str(paragraph_number) + ". I am asking this court to order " + comma_and_list(other_parties) + " to pay me " + currency(calculated_deposit_claim) + ". I am also asking this court to order " + comma_and_list(other_parties) + " to pay for court costs and interest, if applicable."
  
  generate_default = True
---
id: deposit claim reason check
question: |
  Do you want to add to or change this explanation?
subquestion: |
  Your *Small Claims Complaint* will include the following explanation of why ${comma_and_list(other_parties)} owes you ${currency(calculated_deposit_claim)}.
  
  ---
  
  ${single_to_double_newlines(default_deposit_claim_reason)}
  
  ---
  **Note:** If you edit this text and then change your other answers, this text will not update. Be sure the forms say what you want.
fields:
  - Edit this text?: use_new_text
    datatype: yesnoradio
---
depends on:
  - default_deposit_claim_reason
  - use_new_text
  - new_deposit_claim_reason
code: |
  if use_new_text == False:
    deposit_claim_reason = default_deposit_claim_reason
  else:
    deposit_claim_reason = new_deposit_claim_reason
    preview_complaint
  use_that_default = True
---
id: new deposit claim reason
question: |
  Edit the reasons why you are owed ${currency(calculated_deposit_claim)}.
subquestion: |
  **Note:** Once you change this text, this Easy Form won't be able to update it. Be sure the text says what you want.
  
  The form has space for about 27 lines of text, or about 1,800 characters. If you need more room to explain, you can add an additional page. You can preview how your answer looks on the form on the next screen.
fields:
  - Explanation: new_deposit_claim_reason
    input type: area
    rows: 16
    maxlength: 1800
    default: |
      ${default_deposit_claim_reason} 
  - note: After you click **Next**, the program will take a moment to make a preview of the page.
---
id: order info
continue button field: order_info
question: |
  About the *Order* form
subquestion: |
  This program creates a *Small Claims Order* form. You may want to ask the court clerk whether they want you to include it when you file your complaint.
  
  An order is not valid until completed and signed by a judge.
---
id: signature
question: |
  Do you want to add your e-signature to your forms?
subquestion: |
  This program can put "**/s/ ${users[0].name.full(middle='full')}**" where you would sign your name. The court will accept this as your signature.
  
  If you do not add your **{e-signature}** now, you must sign your forms before you file them.
  
  <div class="alert alert-info ilao-info" role="alert">
    <h6 class="alert-heading">What it means to sign your forms</h6>
    <p>By signing your <i>Small Claims Complaint</i>, you are certifying that:
  <p>
  <p><ul>
  <li>You read the document,</li>
  <li>You believe it to be true and correct, and</li>
  <li>You are not filing it for an improper purpose.</li>
  </ul><p>
  <p>See the <a href="https://ilcourtsaudio.blob.core.windows.net/antilles-resources/resources/9ce1fce9-895f-463e-b87d-f9b7631f8fde/Rule%20137.pdf"><b>Illinois Supreme Court Rule 137</b></a> for more information.</p>
  </div>
field: e_signature
choices:
  - Yes: True
  - No, I will sign my forms later.: False
terms:
  - "e-signature": |
      An e-signature is an electronic signature. It is a digital version of a signature that has the same effect as a hand-written signature.
---
id: forms assembling
continue button field: forms_assembling
question: |
  Almost done
subquestion: |
  After you click **Next**, it may take a few moments to finish making your forms.
  
  ###### You do not need to refresh your screen. Hang in there!
  
  [NEWLINE]
---
id: get docs screen
event: get_docs_screen
question: |
  Download
subquestion: |
  Your forms are ready. View and download your forms below. Click **Make changes** to fix any mistakes.
  
  Read the instructions to learn what to do next.
  
  This program does not file your forms with the court or deliver them to defendants. You will need to do this yourself. Learn about [**e-filing in Illinois**](https://www.illinoiscourts.gov/eservices/information-for-filers-without-lawyers).

  **Note:** If you are e-filing, you can upload other documents as attachments during the e-filing process. If you are paper filing, bring copies of the documents to the clerk's office so you can attach them to the complaint.  
  
  ${ action_button_html(url_action('review_answers'), label=':edit: Make changes', color='success', size="md") }

  ${ al_user_bundle.download_list_html() }
 
  &nbsp;

  ${ al_user_bundle.send_button_html(show_editable_checkbox=False) }
  
  **Note:** This program does not file your forms with the court or deliver them to defendants. You will need to do this yourself. Learn about [**e-filing in Illinois**](https://www.illinoiscourts.gov/eservices/information-for-filers-without-lawyers).

  Thank you for using ILAO Easy Forms!
under: |
  % if not user_logged_in():
  [${fa_icon("sign-in-alt", color="#0079d0", size="sm")} **Sign-in**](${url_of('login', next=interview_url())}) or [**create**](${url_of('register', next=interview_url())}) an ILAO Easy Form account to save your progress (optional).
  % endif

 
  ${ action_button_html(interview_url(i="docassemble.ILAO:feedback.yml", easy_form_interview=ilao_easy_form_url, easy_form_title=ilao_easy_form_title, easy_form_page=current_context().question_id, easy_form_variable=current_context().variable, local=False,reset=1), label=':comment: Was this program helpful?', color="#181c36", size="md", new_window=True) }
---
generic object: ALDocumentBundle
template: x.send_email_template
subject: |
  Small Claims Complaint
content: |
  Your forms are attached.
  
  Thanks for using ILAO Easy Forms!
  
  [**Illinois Legal Aid Online**](https://www.illinoislegalaid.org)
---
objects:
  - instructions: ALDocument.using(title="Instructions", filename="instructions.pdf", has_addendum=False)
  - complaint: ALDocument.using(title="Complaint", filename="complaint.pdf", has_addendum=False)
  - additional_defendants: ALDocument.using(title="Additional Defendants", filename="additional_defendants.pdf", has_addendum=False)
  - additional_reasons: ALDocument.using(title="Additional Reasons", filename="additional_reasons.pdf", has_addendum=False)
  - letter_to_sheriff: ALDocument.using(title="Letter to sheriff (complete for each out-of-state defendant)", filename="letter_to_sheriff.pdf", has_addendum=False)
  - order: ALDocument.using(title="Order", filename="order.pdf", has_addendum=False)
  - summons_one: ALDocument.using(title="Summons", filename="summons.pdf", has_addendum=False)
  - summons_two: ALDocument.using(title="Summons 2", filename="summons_2.pdf", has_addendum=False)
  - summons_three: ALDocument.using(title="Summons 3", filename="summons_3.pdf", has_addendum=False)
  - summons_four: ALDocument.using(title="Summons 4", filename="summons_4.pdf", has_addendum=False)
  - summons_five: ALDocument.using(title="Summons 5", filename="summons_5.pdf", has_addendum=False)
  - summons_six: ALDocument.using(title="Summons 6", filename="summons_6.pdf", has_addendum=False)
  - summons_seven: ALDocument.using(title="Summons 7", filename="summons_7.pdf", has_addendum=False)
  - summons_eight: ALDocument.using(title="Summons 8", filename="summons_8.pdf", has_addendum=False)
  - summons_nine: ALDocument.using(title="Summons 9", filename="summons_9.pdf", has_addendum=False)
  - summons_blank: ALDocument.using(title="Blank Summons", filename="summons_blank.pdf", has_addendum=False)
---
objects:
  - al_user_bundle: ALDocumentBundle.using(elements=[instructions, small_claims_complaint_single_pdf_bundle, letter_to_sheriff, order, summons_one, summons_two, summons_three, summons_four, summons_five, summons_six, summons_seven, summons_eight, summons_nine, summons_blank], filename="small_claims_complaint.pdf", title="All forms")
  - al_court_bundle: ALDocumentBundle.using(elements=[instructions, small_claims_complaint_single_pdf_bundle, letter_to_sheriff, order, summons_one, summons_two, summons_three, summons_four, summons_five, summons_six, summons_seven, summons_eight, summons_nine, summons_blank], filename="small_claims_complaint.pdf", title="All forms")
---
objects:
  - small_claims_complaint_single_pdf_bundle: ALDocumentBundle.using(elements=[complaint, additional_defendants, additional_reasons], filename="small_claims_complaint_bundle.pdf", title="Small Claims Complaint", enabled=True)
---
code: |
  instructions.enabled = True
  complaint.enabled = True
  additional_defendants.enabled = False
  additional_reasons.enabled = False
  letter_to_sheriff.enabled = False
  order.enabled = True
  summons_one.enabled = True
  summons_two.enabled = False
  summons_three.enabled = False
  summons_four.enabled = False
  summons_five.enabled = False
  summons_six.enabled = False
  summons_seven.enabled = False
  summons_eight.enabled = False
  summons_nine.enabled = False
  summons_blank.enabled = False
  
  if other_parties.number_gathered() > 2:
    additional_defendants.enabled = True
    
  if landlord_check == False:
    if add_second_page == True:
      additional_reasons.enabled = True
  else:
    if use_new_text == True:
      if add_second_page == True:
        additional_reasons.enabled = True
    
  for person in other_parties:
    if person.service_method == "sheriff":
      if person.agent_check == False:
        if person.same_address == True:
          if person.address.state != "IL":
            letter_to_sheriff.enabled = True
        else:
          if person.service_address.state != "IL":
            letter_to_sheriff.enabled = True
        if person.alt_delivery == True:
          if person.alt_service_address.state != "IL":
            letter_to_sheriff.enabled == True
      else:
        if person.service_address.state != "IL":
          letter_to_sheriff.enabled = True
  
  if other_parties.number() > 1:
      summons_two.enabled = True
      if other_parties.number() > 2:
        summons_three.enabled = True
        if other_parties.number() > 3:
          summons_four.enabled = True
          if other_parties.number() > 4:
            summons_five.enabled = True
            if other_parties.number() > 5:
              summons_six.enabled = True
              if other_parties.number() > 6:
                summons_seven.enabled = True
                if other_parties.number() > 7:
                  summons_eight.enabled = True
                  if other_parties.number() > 8:
                    summons_nine.enabled = True
                    if blank_summons_check == True:
                      summons_blank.enabled = True
---
attachment:
  variable name: instructions[i]
  name: instructions
  filename: instructions
  skip undefined: True
  editable: False
  pdf template file: SMC_Instructions.pdf
  fields:
      - "fake": ${ "" }   
---
attachment:
  variable name: complaint[i]
  name: complaint
  filename: complaint
  skip undefined: True
  editable: False
  pdf template file: SMC_Complaint.pdf
  fields:
    - "case_number": ${""}
    - "filing_county": ${filing_location.county.upper()}
    - "plaintiff_name": ${users[0].name.full(middle='full')}
    - "defendant_list": ${other_parties.short_list(4)}
    - "defendant_one_name": ${other_parties[0].name.full(middle='full')}
    - "defendant_one_address": ${other_parties[0].address.on_one_line(bare=True)}
    - "defendant_two_name": ${other_parties[1].name.full(middle='full')}
    - "defendant_two_address": ${other_parties[1].address.on_one_line(bare=True)}
    - "extra_defendants": ${True if other_parties.number_gathered() > 2 else False}
    - "amount_check": ${currency(amount_check) if landlord_check == False else  currency(calculated_deposit_claim)}
    - "amount_owed_no_symbol": ${currency(amount_check, symbol=u'') if landlord_check == False else currency(calculated_deposit_claim, symbol=u'')}
    - "no_agreement": ${no_agreement_logic}
    - "attached_agreement": ${attached_agreement_logic}
    - "unattached_agreement": ${unattached_agreement_logic}
    - "unattached_reason": ${unattached_reason_logic}
    - "demanded_and_failed": ${demand_letter_check if landlord_check == True else have_demanded_field}
    - "why_owed": ${claim_reason if landlord_check == False else deposit_claim_reason}
    - "additional_reasons": ${reasons_attach}
    - "e_signature": ${users[0].name.full(middle='full') if e_signature == True else ""}
    - "plaintiff_street": ${users[0].address.line_one(bare=True)}
    - "plaintiff_city_state_zip": ${users[0].address.line_two()}
    - "plaintiff_phone": ${phone_number_formatted(users[0].phone_number) if users[0].phone_number != "" else ""}
    - "plaintiff_email": ${users[0].email}
    - "preview_watermark": ${ watermark if i=='preview' else '' }
---
attachment:
  variable name: additional_reasons[i]
  name: additional_reasons
  filename: additional_reasons
  skip undefined: True
  editable: False
  pdf template file: SMC_Additional_Reasons.pdf
  fields:
    - "case_number": ${""}
    - "filing_county": ${filing_location.county.upper()}
    - "plaintiff_name": ${users[0].name.full(middle='full')}
    - "defendant_list": ${other_parties.short_list(4)}
    - "further_reasons": ${more_reason if landlord_check == False else more_deposit_reason}
    - "preview_watermark": ${ watermark if i=='preview' else '' }
---
attachment:
  variable name: additional_defendants[i]
  name: additional_defendants
  filename: additional_defendants
  skip undefined: True
  editable: False
  pdf template file: SMC_Additional_Defendants.pdf
  fields:
    - "case_number": ${""}
    - "filing_county": ${filing_location.county.upper()}
    - "plaintiff_name": ${users[0].name.full(middle='full')}
    - "defendant_list": ${other_parties.short_list(4)}
    - "defendant_three_name": ${other_parties[2].name.full(middle='full')}
    - "defendant_three_address": ${other_parties[2].address.on_one_line(bare=True)}
    - "defendant_four_name": ${other_parties[3].name.full(middle='full')}
    - "defendant_four_address": ${other_parties[3].address.on_one_line(bare=True)}
    - "defendant_five_name": ${other_parties[4].name.full(middle='full')}
    - "defendant_five_address": ${other_parties[4].address.on_one_line(bare=True)}
    - "defendant_six_name": ${other_parties[5].name.full(middle='full')}
    - "defendant_six_address": ${other_parties[5].address.on_one_line(bare=True)}
    - "defendant_seven_name": ${other_parties[6].name.full(middle='full')}
    - "defendant_seven_address": ${other_parties[6].address.on_one_line(bare=True)}
    - "defendant_eight_name": ${other_parties[7].name.full(middle='full')}
    - "defendant_eight_address": ${other_parties[7].address.on_one_line(bare=True)}
    - "defendant_nine_name": ${other_parties[8].name.full(middle='full')}
    - "defendant_nine_address": ${other_parties[8].address.on_one_line(bare=True)}
---
attachment:
  variable name: letter_to_sheriff[i]
  name: letter_to_sheriff
  filename: letter_to_sheriff
  skip undefined: True
  editable: False
  pdf template file: SMC_Letter_to_Sheriff.pdf
  fields:
    - "plaintiff_name": ${users[0].name.full(middle='full')}
    - "plaintiff_address_one": ${users[0].address.line_one(bare=True)}
    - "plaintiff_address_two": ${users[0].address.line_two()}
    - "plaintiff_phone": ${phone_number_formatted(users[0].phone_number) if users[0].phone_number != "" else ""}
    - "plaintiff_email": ${users[0].email}
    - "e_signature": ${users[0].name.full(middle='full') if e_signature == True else ""}
    - "short_defendant_list": ${other_parties.short_list(1)}
---
attachment:
  variable name: order[i]
  name: order
  filename: order
  skip undefined: True
  editable: False
  pdf template file: SMC_Order.pdf
  fields:
    - "case_number": ${""}
    - "filing_county": ${filing_location.county.upper()}
    - "plaintiff_name": ${users[0].name.full(middle='full')}
    - "defendant_list": ${other_parties.short_list(4)}
---
attachment:
  variable name: summons_one[i]
  name: summons_one
  filename: summons_one
  skip undefined: True
  editable: False
  pdf template file: SMC_Summons.pdf
  fields:
    - "case_number": ${""}
    - "filing_county": ${filing_location.county.upper()}
    - "plaintiff_name": ${users[0].name.full(middle='full')}
    - "defendant_list": ${other_parties.short_list(4)}
    - "amount_owed_no_symbol": ${currency(amount_check, symbol=u'') if landlord_check == False else currency(calculated_deposit_claim, symbol=u'')}
    - "defendant_name": ${other_parties[0].name.full(middle='full')}
    - "defendant_name_again": ${other_parties[0].name.full(middle='full') if other_parties[0].alt_delivery == True else ""}
    - "agent_name": ${other_parties[0].agent.name.full(middle='full')}
    - "main_service_street": ${other_parties[0].where_to_serve.line_one(bare=True)}
    - "main_service_csz": ${other_parties[0].where_to_serve.line_two()}
    - "main_service_phone": ${ phone_number_formatted(other_parties[0].service_phone) if other_parties[0].service_phone != "" else ""}
    - "main_service_email": ${other_parties[0].service_email}
    - "alt_service_street": ${other_parties[0].alt_service_address.line_one(bare=True)  if other_parties[0].alt_delivery == True else ""}
    - "alt_service_csz": ${other_parties[0].alt_service_address.line_two()  if other_parties[0].alt_delivery == True else ""}
    - "alt_service_phone": ${ phone_number_formatted(other_parties[0].alt_service_phone) if other_parties[0].alt_service_phone != "" and other_parties[0].alt_delivery == True else ""}
    - "alt_service_email": ${other_parties[0].alt_service_email if other_parties[0].alt_delivery == True else ""}
    - "by_mail": ${ True if other_parties[0].service_method == "clerk" else False}
    - "by_sheriff": ${ True if other_parties[0].service_method == "sheriff" else False}
    - "by_server": ${ True if other_parties[0].service_method == "server" else False}
    - "plaintiff_street": ${users[0].address.line_one(bare=True)}
    - "plaintiff_csz": ${users[0].address.line_two()}
    - "plaintiff_phone": ${phone_number_formatted(users[0].phone_number) if users[0].phone_number != "" else ""}
    - "plaintiff_email": ${users[0].email}
    - "courthouse_address": ${ courthouse_info }
    - "clerk_phone": ${ reference_number.phone }
    - "clerk_website": ${ reference_number.website }
---
attachment:
  variable name: summons_two[i]
  name: summons_two
  filename: summons_two
  skip undefined: True
  editable: False
  pdf template file: SMC_Summons.pdf
  fields:
    - "case_number": ${""}
    - "filing_county": ${filing_location.county.upper()}
    - "plaintiff_name": ${users[0].name.full(middle='full')}
    - "defendant_list": ${other_parties.short_list(4)}
    - "defendant_name": ${other_parties[1].name.full(middle='full')}
    - "defendant_name_again": ${other_parties[1].name.full(middle='full') if other_parties[0].alt_delivery == True else ""}
    - "agent_name": ${other_parties[1].agent.name.full(middle='full')}
    - "main_service_street": ${other_parties[1].where_to_serve.line_one(bare=True)}
    - "main_service_csz": ${other_parties[1].where_to_serve.line_two()}
    - "main_service_phone": ${ phone_number_formatted(other_parties[1].service_phone) if other_parties[1].service_phone != "" else ""}
    - "main_service_email": ${other_parties[1].service_email}
    - "alt_service_street": ${other_parties[1].alt_service_address.line_one(bare=True)  if other_parties[1].alt_delivery == True else ""}
    - "alt_service_csz": ${other_parties[1].alt_service_address.line_two()  if other_parties[1].alt_delivery == True else ""}
    - "alt_service_phone": ${ phone_number_formatted(other_parties[1].alt_service_phone) if other_parties[1].alt_service_phone != "" and other_parties[1].alt_delivery == True else ""}
    - "alt_service_email": ${other_parties[1].alt_service_email if other_parties[1].alt_delivery == True else ""}
    - "by_mail": ${ True if other_parties[1].service_method == "clerk" else False}
    - "by_sheriff": ${ True if other_parties[1].service_method == "sheriff" else False}
    - "by_server": ${ True if other_parties[1].service_method == "server" else False}
    - "plaintiff_street": ${users[0].address.line_one(bare=True)}
    - "plaintiff_csz": ${users[0].address.line_two()}
    - "plaintiff_phone": ${phone_number_formatted(users[0].phone_number) if users[0].phone_number != "" else ""}
    - "plaintiff_email": ${users[0].email}
    - "courthouse_address": ${ courthouse_info }
    - "clerk_phone": ${ reference_number.phone }
    - "clerk_website": ${ reference_number.website }
---
attachment:
  variable name: summons_three[i]
  name: summons_three
  filename: summons_three
  skip undefined: True
  editable: False
  pdf template file: SMC_Summons.pdf
  fields:
    - "case_number": ${""}
    - "filing_county": ${filing_location.county.upper()}
    - "plaintiff_name": ${users[0].name.full(middle='full')}
    - "defendant_list": ${other_parties.short_list(4)}
    - "defendant_name": ${other_parties[2].name.full(middle='full')}
    - "defendant_name_again": ${other_parties[2].name.full(middle='full') if other_parties[0].alt_delivery == True else ""}
    - "agent_name": ${other_parties[2].agent.name.full(middle='full')}
    - "main_service_street": ${other_parties[2].where_to_serve.line_one(bare=True)}
    - "main_service_csz": ${other_parties[2].where_to_serve.line_two()}
    - "main_service_phone": ${ phone_number_formatted(other_parties[2].service_phone) if other_parties[2].service_phone != "" else ""}
    - "main_service_email": ${other_parties[2].service_email}
    - "alt_service_street": ${other_parties[2].alt_service_address.line_one(bare=True)  if other_parties[2].alt_delivery == True else ""}
    - "alt_service_csz": ${other_parties[2].alt_service_address.line_two()  if other_parties[2].alt_delivery == True else ""}
    - "alt_service_phone": ${ phone_number_formatted(other_parties[2].alt_service_phone) if other_parties[2].alt_service_phone != "" and other_parties[2].alt_delivery == True else ""}
    - "alt_service_email": ${other_parties[2].alt_service_email if other_parties[2].alt_delivery == True else ""}
    - "by_mail": ${ True if other_parties[2].service_method == "clerk" else False}
    - "by_sheriff": ${ True if other_parties[2].service_method == "sheriff" else False}
    - "by_server": ${ True if other_parties[2].service_method == "server" else False}
    - "plaintiff_street": ${users[0].address.line_one(bare=True)}
    - "plaintiff_csz": ${users[0].address.line_two()}
    - "plaintiff_phone": ${phone_number_formatted(users[0].phone_number) if users[0].phone_number != "" else ""}
    - "plaintiff_email": ${users[0].email}
    - "courthouse_address": ${ courthouse_info }
    - "clerk_phone": ${ reference_number.phone }
    - "clerk_website": ${ reference_number.website }
---
attachment:
  variable name: summons_four[i]
  name: summons_four
  filename: summons_four
  skip undefined: True
  editable: False
  pdf template file: SMC_Summons.pdf
  fields:
    - "case_number": ${""}
    - "filing_county": ${filing_location.county.upper()}
    - "plaintiff_name": ${users[0].name.full(middle='full')}
    - "defendant_list": ${other_parties.short_list(4)}
    - "defendant_name": ${other_parties[3].name.full(middle='full')}
    - "defendant_name_again": ${other_parties[3].name.full(middle='full') if other_parties[0].alt_delivery == True else ""}
    - "agent_name": ${other_parties[3].agent.name.full(middle='full')}
    - "main_service_street": ${other_parties[3].where_to_serve.line_one(bare=True)}
    - "main_service_csz": ${other_parties[3].where_to_serve.line_two()}
    - "main_service_phone": ${ phone_number_formatted(other_parties[3].service_phone) if other_parties[3].service_phone != "" else ""}
    - "main_service_email": ${other_parties[3].service_email}
    - "alt_service_street": ${other_parties[3].alt_service_address.line_one(bare=True)  if other_parties[3].alt_delivery == True else ""}
    - "alt_service_csz": ${other_parties[3].alt_service_address.line_two()  if other_parties[3].alt_delivery == True else ""}
    - "alt_service_phone": ${ phone_number_formatted(other_parties[3].alt_service_phone) if other_parties[3].alt_service_phone != "" and other_parties[3].alt_delivery == True else ""}
    - "alt_service_email": ${other_parties[3].alt_service_email if other_parties[3].alt_delivery == True else ""}
    - "by_mail": ${ True if other_parties[3].service_method == "clerk" else False}
    - "by_sheriff": ${ True if other_parties[3].service_method == "sheriff" else False}
    - "by_server": ${ True if other_parties[3].service_method == "server" else False}
    - "plaintiff_street": ${users[0].address.line_one(bare=True)}
    - "plaintiff_csz": ${users[0].address.line_two()}
    - "plaintiff_phone": ${phone_number_formatted(users[0].phone_number) if users[0].phone_number != "" else ""}
    - "plaintiff_email": ${users[0].email}
    - "courthouse_address": ${ courthouse_info }
    - "clerk_phone": ${ reference_number.phone }
    - "clerk_website": ${ reference_number.website }
---
attachment:
  variable name: summons_five[i]
  name: summons_five
  filename: summons_five
  skip undefined: True
  editable: False
  pdf template file: SMC_Summons.pdf
  fields:
    - "case_number": ${""}
    - "filing_county": ${filing_location.county.upper()}
    - "plaintiff_name": ${users[0].name.full(middle='full')}
    - "defendant_list": ${other_parties.short_list(4)}
    - "defendant_name": ${other_parties[4].name.full(middle='full')}
    - "defendant_name_again": ${other_parties[4].name.full(middle='full') if other_parties[0].alt_delivery == True else ""}
    - "agent_name": ${other_parties[4].agent.name.full(middle='full')}
    - "main_service_street": ${other_parties[4].where_to_serve.line_one(bare=True)}
    - "main_service_csz": ${other_parties[4].where_to_serve.line_two()}
    - "main_service_phone": ${ phone_number_formatted(other_parties[4].service_phone) if other_parties[4].service_phone != "" else ""}
    - "main_service_email": ${other_parties[4].service_email}
    - "alt_service_street": ${other_parties[4].alt_service_address.line_one(bare=True)  if other_parties[4].alt_delivery == True else ""}
    - "alt_service_csz": ${other_parties[4].alt_service_address.line_two()  if other_parties[4].alt_delivery == True else ""}
    - "alt_service_phone": ${ phone_number_formatted(other_parties[4].alt_service_phone) if other_parties[4].alt_service_phone != "" and other_parties[4].alt_delivery == True else ""}
    - "alt_service_email": ${other_parties[4].alt_service_email if other_parties[4].alt_delivery == True else ""}
    - "by_mail": ${ True if other_parties[4].service_method == "clerk" else False}
    - "by_sheriff": ${ True if other_parties[4].service_method == "sheriff" else False}
    - "by_server": ${ True if other_parties[4].service_method == "server" else False}
    - "plaintiff_street": ${users[0].address.line_one(bare=True)}
    - "plaintiff_csz": ${users[0].address.line_two()}
    - "plaintiff_phone": ${phone_number_formatted(users[0].phone_number) if users[0].phone_number != "" else ""}
    - "plaintiff_email": ${users[0].email}
    - "courthouse_address": ${ courthouse_info }
    - "clerk_phone": ${ reference_number.phone }
    - "clerk_website": ${ reference_number.website }
---
attachment:
  variable name: summons_six[i]
  name: summons_six
  filename: summons_six
  skip undefined: True
  editable: False
  pdf template file: SMC_Summons.pdf
  fields:
    - "case_number": ${""}
    - "filing_county": ${filing_location.county.upper()}
    - "plaintiff_name": ${users[0].name.full(middle='full')}
    - "defendant_list": ${other_parties.short_list(4)}
    - "defendant_name": ${other_parties[5].name.full(middle='full')}
    - "defendant_name_again": ${other_parties[5].name.full(middle='full') if other_parties[0].alt_delivery == True else ""}
    - "agent_name": ${other_parties[5].agent.name.full(middle='full')}
    - "main_service_street": ${other_parties[5].where_to_serve.line_one(bare=True)}
    - "main_service_csz": ${other_parties[5].where_to_serve.line_two()}
    - "main_service_phone": ${ phone_number_formatted(other_parties[5].service_phone) if other_parties[5].service_phone != "" else ""}
    - "main_service_email": ${other_parties[5].service_email}
    - "alt_service_street": ${other_parties[5].alt_service_address.line_one(bare=True)  if other_parties[5].alt_delivery == True else ""}
    - "alt_service_csz": ${other_parties[5].alt_service_address.line_two()  if other_parties[5].alt_delivery == True else ""}
    - "alt_service_phone": ${ phone_number_formatted(other_parties[5].alt_service_phone) if other_parties[5].alt_service_phone != "" and other_parties[5].alt_delivery == True else ""}
    - "alt_service_email": ${other_parties[5].alt_service_email if other_parties[5].alt_delivery == True else ""}
    - "by_mail": ${ True if other_parties[5].service_method == "clerk" else False}
    - "by_sheriff": ${ True if other_parties[5].service_method == "sheriff" else False}
    - "by_server": ${ True if other_parties[5].service_method == "server" else False}
    - "plaintiff_street": ${users[0].address.line_one(bare=True)}
    - "plaintiff_csz": ${users[0].address.line_two()}
    - "plaintiff_phone": ${phone_number_formatted(users[0].phone_number) if users[0].phone_number != "" else ""}
    - "plaintiff_email": ${users[0].email}
    - "courthouse_address": ${ courthouse_info }
    - "clerk_phone": ${ reference_number.phone }
    - "clerk_website": ${ reference_number.website }
---
attachment:
  variable name: summons_seven[i]
  name: summons_seven
  filename: summons_seven
  skip undefined: True
  editable: False
  pdf template file: SMC_Summons.pdf
  fields:
    - "case_number": ${""}
    - "filing_county": ${filing_location.county.upper()}
    - "plaintiff_name": ${users[0].name.full(middle='full')}
    - "defendant_list": ${other_parties.short_list(4)}
    - "defendant_name": ${other_parties[6].name.full(middle='full')}
    - "defendant_name_again": ${other_parties[6].name.full(middle='full') if other_parties[0].alt_delivery == True else ""}
    - "agent_name": ${other_parties[6].agent.name.full(middle='full')}
    - "main_service_street": ${other_parties[6].where_to_serve.line_one(bare=True)}
    - "main_service_csz": ${other_parties[6].where_to_serve.line_two()}
    - "main_service_phone": ${ phone_number_formatted(other_parties[6].service_phone) if other_parties[6].service_phone != "" else ""}
    - "main_service_email": ${other_parties[6].service_email}
    - "alt_service_street": ${other_parties[6].alt_service_address.line_one(bare=True)  if other_parties[6].alt_delivery == True else ""}
    - "alt_service_csz": ${other_parties[6].alt_service_address.line_two()  if other_parties[6].alt_delivery == True else ""}
    - "alt_service_phone": ${ phone_number_formatted(other_parties[6].alt_service_phone) if other_parties[6].alt_service_phone != "" and other_parties[6].alt_delivery == True else ""}
    - "alt_service_email": ${other_parties[6].alt_service_email if other_parties[6].alt_delivery == True else ""}
    - "by_mail": ${ True if other_parties[6].service_method == "clerk" else False}
    - "by_sheriff": ${ True if other_parties[6].service_method == "sheriff" else False}
    - "by_server": ${ True if other_parties[6].service_method == "server" else False}
    - "plaintiff_street": ${users[0].address.line_one(bare=True)}
    - "plaintiff_csz": ${users[0].address.line_two()}
    - "plaintiff_phone": ${phone_number_formatted(users[0].phone_number) if users[0].phone_number != "" else ""}
    - "plaintiff_email": ${users[0].email}
    - "courthouse_address": ${ courthouse_info }
    - "clerk_phone": ${ reference_number.phone }
    - "clerk_website": ${ reference_number.website }
---
attachment:
  variable name: summons_eight[i]
  name: summons_eight
  filename: summons_eight
  skip undefined: True
  editable: False
  pdf template file: SMC_Summons.pdf
  fields:
    - "case_number": ${""}
    - "filing_county": ${filing_location.county.upper()}
    - "plaintiff_name": ${users[0].name.full(middle='full')}
    - "defendant_list": ${other_parties.short_list(4)}
    - "defendant_name": ${other_parties[7].name.full(middle='full')}
    - "defendant_name_again": ${other_parties[7].name.full(middle='full') if other_parties[0].alt_delivery == True else ""}
    - "agent_name": ${other_parties[7].agent.name.full(middle='full')}
    - "main_service_street": ${other_parties[7].where_to_serve.line_one(bare=True)}
    - "main_service_csz": ${other_parties[7].where_to_serve.line_two()}
    - "main_service_phone": ${ phone_number_formatted(other_parties[7].service_phone) if other_parties[7].service_phone != "" else ""}
    - "main_service_email": ${other_parties[7].service_email}
    - "alt_service_street": ${other_parties[7].alt_service_address.line_one(bare=True)  if other_parties[7].alt_delivery == True else ""}
    - "alt_service_csz": ${other_parties[7].alt_service_address.line_two()  if other_parties[7].alt_delivery == True else ""}
    - "alt_service_phone": ${ phone_number_formatted(other_parties[7].alt_service_phone) if other_parties[7].alt_service_phone != "" and other_parties[7].alt_delivery == True else ""}
    - "alt_service_email": ${other_parties[7].alt_service_email if other_parties[7].alt_delivery == True else ""}
    - "by_mail": ${ True if other_parties[7].service_method == "clerk" else False}
    - "by_sheriff": ${ True if other_parties[7].service_method == "sheriff" else False}
    - "by_server": ${ True if other_parties[7].service_method == "server" else False}
    - "plaintiff_street": ${users[0].address.line_one(bare=True)}
    - "plaintiff_csz": ${users[0].address.line_two()}
    - "plaintiff_phone": ${phone_number_formatted(users[0].phone_number) if users[0].phone_number != "" else ""}
    - "plaintiff_email": ${users[0].email}
    - "courthouse_address": ${ courthouse_info }
    - "clerk_phone": ${ reference_number.phone }
    - "clerk_website": ${ reference_number.website }
---
attachment:
  variable name: summons_nine[i]
  name: summons_nine
  filename: summons_nine
  skip undefined: True
  editable: False
  pdf template file: SMC_Summons.pdf
  fields:
    - "case_number": ${""}
    - "filing_county": ${filing_location.county.upper()}
    - "plaintiff_name": ${users[0].name.full(middle='full')}
    - "defendant_list": ${other_parties.short_list(4)}
    - "defendant_name": ${other_parties[8].name.full(middle='full')}
    - "defendant_name_again": ${other_parties[8].name.full(middle='full') if other_parties[0].alt_delivery == True else ""}
    - "agent_name": ${other_parties[8].agent.name.full(middle='full')}
    - "main_service_street": ${other_parties[8].where_to_serve.line_one(bare=True)}
    - "main_service_csz": ${other_parties[8].where_to_serve.line_two()}
    - "main_service_phone": ${ phone_number_formatted(other_parties[8].service_phone) if other_parties[8].service_phone != "" else ""}
    - "main_service_email": ${other_parties[8].service_email}
    - "alt_service_street": ${other_parties[8].alt_service_address.line_one(bare=True)  if other_parties[8].alt_delivery == True else ""}
    - "alt_service_csz": ${other_parties[8].alt_service_address.line_two()  if other_parties[8].alt_delivery == True else ""}
    - "alt_service_phone": ${ phone_number_formatted(other_parties[8].alt_service_phone) if other_parties[8].alt_service_phone != "" and other_parties[8].alt_delivery == True else ""}
    - "alt_service_email": ${other_parties[8].alt_service_email if other_parties[8].alt_delivery == True else ""}
    - "by_mail": ${ True if other_parties[8].service_method == "clerk" else False}
    - "by_sheriff": ${ True if other_parties[8].service_method == "sheriff" else False}
    - "by_server": ${ True if other_parties[8].service_method == "server" else False}
    - "plaintiff_street": ${users[0].address.line_one(bare=True)}
    - "plaintiff_csz": ${users[0].address.line_two()}
    - "plaintiff_phone": ${phone_number_formatted(users[0].phone_number) if users[0].phone_number != "" else ""}
    - "plaintiff_email": ${users[0].email}
    - "courthouse_address": ${ courthouse_info }
    - "clerk_phone": ${ reference_number.phone }
    - "clerk_website": ${ reference_number.website }
---
attachment:
  variable name: summons_blank[i]
  name: summons_blank
  filename: summons_blank
  skip undefined: True
  editable: False
  pdf template file: SMC_Summons_Blank.pdf
  fields:
   - "fake": ${""}
---
id: review screen
event: review_answers
question: |
  Review screen
subquestion: |
  Edit your answers below.
review: 
  - Edit: amount_check
    button: |
      **You are suing for:**
      ${currency(amount_check)} 
    show if: landlord_check == False
  - Edit: filing_location.county_number
    button: |
      **You are filing in:**
      ${end_in_county(filing_location.county)}
  - Edit: other_parties.revisit
    button: |
      **Defendants: (Edit to change names, addresses, and other information)**

      % for my_var in other_parties:
        * ${ my_var.name.full(middle="full") }
      % endfor
  - Edit: landlord_check
    button: |
      **Are you suing your former landlord to return a security deposit?**
      ${word(yesno(landlord_check))}
  - Edit: move_in_date
    button: |
      **Move in date:**
      ${move_in_date}
    show if: landlord_check
  - Edit: move_out_date
    button: |
      **Move out date:**
      ${move_out_date}
    show if: landlord_check
  - Edit: demand_letter_date
    button: |
      **When did you send a letter requesting your security deposit?**
      ${demand_letter_date}
    show if: landlord_check
  - label: Edit
    fields:
      - rental_address.address
      - recompute:
        - rental_address.county_correct
    button: |
      **Address of rental property:**
      ${rental_address.on_one_line(bare=True)}
    show if: landlord_check
  - Edit: property_type_check
    button: |
      **Is the property:**
      
      % if rental_address.city.lower() == "chicago":
      * **A medical, educational, or relgious facility,**
      * **A hotel or motel,**
      * **Something you have signed a contract to buy,**
      * **A place you had to rent because the landlord is your employer, and the job required you to rent there, or**
      * **A co-op**
      % elif rental_address.city.lower() == "dekalb":
      * **A medical, educational, or relgious facility,**
      * **A hotel or motel,**
      * **Government-owned, or**
      * **A rooming house**
      % elif rental_address.city.lower() == "evanston":
      * **A medical, educational, or relgious facility,**
      * **A hotel or motel,**
      * **A fraternity or social organization,**
      * **Something you have signed a contract to buy,**
      * **A co-op, or**
      * **An educational institution**
      % elif rental_address.city.lower() == "mount prospect":
      * **A medical, educational, or relgious facility,**
      * **A residential care home,**
      * **A hotel or motel, or**
      * **Something you have signed a contract to buy**
      % elif rental_address.city.lower() == "oak park":
      * **A hotel or motel,**
      * **A medical, educational, or relgious facility,**
      * **A school dormitory,**
      * **A temporary or transitional shelter,**
      * **A place you had to rent because the landlord is your employer, and the job required you to rent there**
      % elif rental_address.city.lower() == "urbana":
      * **A medical, educational, or relgious facility,**
      * **A hotel or motel,**
      * **A fraternity or social organization,**
      * **Something you have signed a contract to buy, or**
      * **A place you had to rent because the landlord is your employer, and the job required you to rent there**
      % elif end_in_county(rental_address.county).lower() == "cook county":
      * **A hotel or motel,**
      * **A school dormitory,**
      * **A shelter or a single-room-occupancy (SRO),**
      * **A place you had to rent because the landlord is your employer, and the job required you to rent there, or**
      * **An owner-occupied co-op**
      % endif
      
      ${word(yesno(property_type_check))}
    show if: rental_address.city.lower() == "chicago" or rental_address.city.lower() == "dekalb" or rental_address.city.lower() == "evanston" or rental_address.city.lower() == "mount prospect" or rental_address.city.lower() == "oak park" or rental_address.city.lower() == "urbana" or end_in_county(rental_address.county).lower() == "cook county"
  - Edit: owner_occupant
    button: |
      **Does the landlord live in one of the units on the property?**
      ${word(yesno(owner_occupant))}
    show if: landlord_check == True
  - Edit: cook_family_check
    button: |
      **Is the property a single-family home or condominium, where**

      * **the landlord is only renting that one rental property, and**
      * **the landlord or an immediate family member has lived in the home within the year?**
      
      ${word(yesno(cook_family_check))}
    show if: owner_occupant == False and end_in_county(rental_address.county).lower() == "cook county" and rental_address.city.lower() != "chicago" and rental_address.city.lower() != "oak park" and rental_address.city.lower() != "evanston" and rental_address.city.lower() != "mount prospect"
  - Edit: unit_number_general
    button: |
      **How many units are in the property?**
      % if unit_number_general == "too_few_for_illinois":
      4 or fewer
      % elif unit_number_general == "depends_on_area":
      5 or 6 units
      % elif unit_number_general == "enough_anywhere":
      7 or more
      % elif unit_number_general == "dont_know":
      I don't know.
      % endif
  - Edit: deposit_payments[0]
    button: |
      % if another_deposit[0] == True:
      **First security deposit payment:**
      % else:
      **Security deposit payment:**
      % endif
      ${currency(deposit_payments[0])}
    show if: landlord_check
  - Edit: deposit_dates[0]
    button: |
      % if another_deposit[0] == True:
      **Date of first deposit payment:**
      % else:
      **Date of deposit payment:**
      % endif
      ${deposit_dates[0]}
    show if: landlord_check
  - Edit: another_deposit[0]
    button: |
      **Did you make more than one payment?**
      ${word(yesno(another_deposit[0]))}
    show if: landlord_check
  - Edit: deposit_payments[1]
    button: |
      **Second security deposit payment:**
      ${currency(deposit_payments[1])}
    show if: landlord_check == True and another_deposit[0] == True
  - Edit: deposit_dates[1]
    button: |
      **Date of second deposit payment:**
      ${deposit_dates[1]}
    show if: landlord_check == True and another_deposit[0] == True
  - Edit: another_deposit[1]
    button: |
      **Did you make more than two payments?**
      ${word(yesno(another_deposit[1]))}
    show if: landlord_check == True and another_deposit[0] == True
  - Edit: deposit_payments[2]
    button: |
      **Total of remaining security deposit payments:**
      ${currency(deposit_payments[2])}
    show if: landlord_check == True and another_deposit[0] == True and another_deposit[1] == True
  - Edit: deposit_dates[2]
    button: |
      **Date of final deposit payment:**
      ${deposit_dates[2]}
    show if: landlord_check == True and another_deposit[0] == True and another_deposit[1] == True
  - Edit: partial_return_check
    button: |
      **Did your landlord return part of your security deposit?**
      ${word(yesno(partial_return_check))}
    show if: landlord_check
  - Edit: partial_return_amount
    button: |
      **Amount returned to you:**
      ${currency(partial_return_amount)}
    show if: landlord_check == True and partial_return_check == True
  - Edit: partial_return_date
    button: |
      **Date partial amount returned to you:**
      ${partial_return_date}
    show if: landlord_check == True and partial_return_check == True
  - Edit: damages_check
    button: |
      **Did your landlord send you a letter saying they need money from your security deposit to make repairs?**
      ${word(yesno(damages_check))}
    show if: landlord_check
  - Edit: dispute_withholding
    button: |
      **Do you agree that your landlord used a reasonable amount of the deposit to repair damages?**
      ${word(yesno(dispute_withholding))}
    show if: landlord_check and damages_check
  - Edit: damages_date
    button: |
      **Date you received the statement of damages:**
      ${damages_date}
    show if: landlord_check and damages_check
  - Edit: lease_check
    button: |
      **Did you have a written lease?**
      ${word(yesno(lease_check))}
    show if: landlord_check
  - Edit: lease_attach_check
    button: |
      **Will you attach a copy of the lease?**
      ${word(yesno(lease_attach_check))}
    show if: landlord_check == True and lease_check == True
  - Edit: lease_attach_explain
    button: |
      **Why can't you attach a copy of your lease?**
      ${lease_attach_explain}
    show if: landlord_check == True and lease_check == True and lease_attach_check == False
  - Edit: deposit_payment_proof
    button: |
      **Will you attach proof you paid a security deposit?**
      ${word(yesno(deposit_payment_proof))}
    show if: landlord_check
  - Edit: demand_letter_attach
    button: |
      **Will you attach a copy of the demand letter you sent?**
      ${word(yesno(demand_letter_attach))}
    show if: landlord_check
  - label: Edit
    fields:
      - use_new_text
      - recompute:
        - use_that_default
        - deposit_claim_reason
    button: |
      **Your claim (Edit to refresh text with your latest answers):**
      
      ${deposit_claim_reason}
    show if: landlord_check == True and use_new_text == False
  - label: Edit
    fields:
      - use_new_text
      - new_deposit_claim_reason
      - recompute:
        - use_that_default
        - deposit_claim_reason 
    button: |
      **Your claim:**
      
      ${deposit_claim_reason}
    show if: landlord_check == True and use_new_text == True
    #jump to
  - Edit: add_second_page
    button: |
      **Do you need a second page to explain your claim?**
      ${word(yesno(add_second_page))}
    show if: landlord_check == True and use_new_text == True
  - Edit: more_deposit_reason
    button: |
      **Your claim (second page):**
      
      ${more_deposit_reason}
    show if: landlord_check == True and use_new_text == True and add_second_page == True
  - Edit: agreement_check
    button: |
      % if other_parties.number_gathered() > 1:
      **Do you have a written agreement with the defendants?**
      % else:
      **Do you have a written agreement with ${other_parties[0].name.full(middle='full')}?**
      % endif
      ${word(yesno(agreement_check))}
    show if: landlord_check == False
  - Edit: attach_check
    button: |
      **Will you attach your written agreement?**
      ${word(yesno(attach_check))}
    show if: agreement_check == True and landlord_check == False
  - Edit: attach_explain
    button: |
      **Why can't you attach a copy of your written agreement?**
      ${attach_explain}
    show if: agreement_check == True and attach_check == False and landlord_check == False
  - Edit: demand_check
    button: |
      **Have you demanded payment of ${currency(amount_check)}?**
      ${word(yesno(demand_check))}
    show if: landlord_check == False
  - Edit: demand_answer_check
    button: |
      % if other_parties.number_gathered() > 1:
      **Have the defendants failed to pay you in full?**
      % else:
      **Has ${other_parties[0].name.full(middle='full')} failed to pay you in full?**
      % endif
      ${word(yesno(demand_answer_check))}
    show if: landlord_check == False and demand_check == True
  - Edit: claim_reason
    button: |
      % if other_parties.number_gathered() > 1:
      **Why do the defendants owe you ${currency(amount_check)}?**
      % else:
      **Why does ${other_parties[0].name.full(middle='full')} owe you ${currency(amount_check)}?**
      % endif
      
      ${claim_reason}
    show if: landlord_check == False
  - Edit: add_second_page
    button: |
      % if other_parties.number_gathered() > 1:
      **Do you need a second page to explain why the defendants owe you ${currency(amount_check)}?**
      % else:
      **Do you need a second page to explain why ${other_parties[0].name.full(middle='full')} owes you ${currency(amount_check)}?**
      % endif
      ${add_second_page}
    show if: landlord_check == False
  - Edit: more_reason
    button: |
      % if other_parties.number_gathered() > 1:
      **Why do the defendants owe you ${currency(amount_check)} (second page)?**
      % else:
      **Why does ${other_parties[0].name.full(middle='full')} owe you ${currency(amount_check)} (second page)?**
      % endif
      
      ${more_reason}
    show if: landlord_check == False
  - Edit: users[0].name.first
    button: |
      **Your name:**
      ${users[0].name.full(middle='full')}
  - Edit: users[0].address.address
    button: |
      **Your address:**
      ${users[0].address.on_one_line(bare=True)}
  - Edit: users[0].phone_number
    button: |
      **Your phone number:**
      ${phone_number_formatted(users[0].phone_number)}
  - Edit: users[0].email
    button: |
      **Your email address:**
      ${users[0].email}
  - Edit: e_signature
    button: |
      **Do you want to add your electronic signature to your forms?**
      ${word(yesno(e_signature))}
---
##logic to determine whether amount_check variable is displayed in review screens. No longer used, if you are reading this after 2023, you can delete this code block.
#recompute: True
#code: |
#  if defined('landlord_check'):
#    if landlord_check == False:
#      show_amount_check = True
#    else:
#      if defined('claim_amount_update'):
#        if claim_amount_update == True:
#          show_amount_check = False
#        else:
#          show_amount_check = True
#      else:
#        show_amount_check = True
#  else:
#    show_amount_check = True
---
id: other parties review screen
continue button field: other_parties.revisit
question: |
    Edit the defendants
subquestion: |
  ${ other_parties.table }

  ${ other_parties.add_action() }
---
table: other_parties.table
rows: other_parties
columns:
  - Name: |
      row_item.name.full(middle="full") if defined("row_item.name.first") else ""
  - Contact, service address, and additional information: |
      action_button_html(url_action(row_item.attr_name("review_defendant_info")), label="Edit", icon="pencil-alt")
delete buttons: True
confirm: True
---
id: defendant info review screen
continue button field: x.review_defendant_info
generic object: ALIndividual
question: |
  Edit ${ x.name.full(middle="full") }'s information
review: 
  - Edit: x.name.first
    button: |
      **Defendant name:**
      ${x.name.full(middle='full')}
  - Edit: x.name.first
    button: |
      **Is ${x.name.full(middle='full')} a person or a business?**
      % if x.person_type == "ALIndividual":
      A person
      % else:
      A business
      % endif
  - Edit: x.address.address
    button: |
      **${x.name.full(middle='full')}'s address:**
      ${x.address.on_one_line(bare=True)}
  - Edit: x.agent_check
    button: |
      **Does ${x.name.full(middle='full')} have a registered agent?**
      ${word(yesno(x.agent_check))}
    show if: x.person_type != "ALIndividual"
  - Edit: x.agent.name.first
    button: |
      **What is ${x.name.full(middle='full')}'s registered agent's name?**
      ${x.agent.name.full(middle='full')}
    show if: x.agent_check
  - Edit: x.same_address
    button: |
      % if x.agent_check == True:
      **Do you want to serve ${x.agent.name.full(middle='full')} at ${x.address.on_one_line(bare=True)}?**
      % else:
      **Do you want to serve ${x.name.full(middle='full')} at ${x.address.on_one_line(bare=True)}?**
      % endif
      ${word(yesno(x.same_address))}
  - Edit: x.service_address.address
    button: |
      % if x.agent_check == True:
      **Where do you want to serve ${x.agent.name.full(middle='full')}?**
      % else:
      **Where do you want to serve ${x.name.full(middle='full')}?**
      % endif
      ${x.service_address.on_one_line(bare=True)}
    show if: x.same_address == False
  - Edit: x.service_phone
    button: |
      % if x.agent_check == True:
      **What is ${x.agent.name.full(middle='full')}'s phone number?**
      % else:
      **What is ${x.name.full(middle='full')}'s phone number?**
      % endif
      ${phone_number_formatted(x.service_phone)}
  - Edit: x.service_email
    button: |
      % if x.agent_check == True:
      **What is ${x.agent.name.full(middle='full')}'s email address?**
      % else:
      **What is ${x.name.full(middle='full')}'s email address?**
      % endif
      ${x.service_email}
  - Edit: x.alt_delivery
    button: |
      % if other_parties[i].agent_check == True:
      **Do you want to list an alternate address, phone number, or email for ${other_parties[i].agent.name.full(middle='full')}?**
      % else:
      **Do you want to list an alternate address, phone number, or email for ${other_parties[i].name.full(middle='full')}?**
      % endif
      ${word(yesno(x.alt_delivery))}
  - Edit: x.alt_service_address.address
    button: |
      % if x.agent_check == True:
      **What is ${x.agent.name.full(middle='full')}'s alternate service address?**
      % else:
      **What is ${x.name.full(middle='full')}'s alternate service address?**
      % endif
      ${x.alt_service_address.on_one_line(bare=True)}
    show if: x.alt_delivery
  - Edit: x.alt_service_phone
    button: |
      % if x.agent_check == True:
      **What is ${x.agent.name.full(middle='full')}'s alternate phone number?**
      % else:
      **What is ${x.name.full(middle='full')}'s alternate phone number?**
      % endif
      ${phone_number_formatted(x.alt_service_phone)}
    show if: x.alt_delivery
  - Edit: x.alt_service_email
    button: |
      % if x.agent_check == True:
      **What is ${x.agent.name.full(middle='full')}'s alternate email address?**
      % else:
      **What is ${x.name.full(middle='full')}'s alternate email address?**
      % endif
      ${x.alt_service_email}
    show if: x.alt_delivery
  - Edit: x.service_method
    button: |
      % if x.agent_check == True:
      **How will you serve ${x.agent.name.full(middle='full')}?**
      % else:
      **How will you serve ${x.name.full(middle='full')}?**
      % endif
      % if x.service_method == "clerk":
      By Circuit Clerk (only for defendants in Illinois)
      % elif x.service_method == "sheriff":
      By sheriff
      % elif x.service_method == "server":
      By special process server
      % elif x.service_method == "unknown":
      I do not know yet
      % endif
---
section: About the case
id: case review screen
event: section_case
question: |
  About the case
subquestion: |
  Edit your answers below.
review:
  - Edit: amount_check
    button: |
      **You are suing for:**
      ${currency(amount_check)}  
    show if: landlord_check == False
  - Edit: filing_location.county_number
    button: |
      **You are filing in:**
      ${end_in_county(filing_location.county)}
  - Edit: landlord_check
    button: |
      **Are you suing your former landlord to return a security deposit?**
      ${word(yesno(landlord_check))}
  - Edit: move_in_date
    button: |
      **Move in date:**
      ${move_in_date}
    show if: landlord_check
  - Edit: move_out_date
    button: |
      **Move out date:**
      ${move_out_date}
    show if: landlord_check
  - Edit: demand_letter_date
    button: |
      **When did you send a letter requesting your security deposit?**
      ${demand_letter_date}
    show if: landlord_check
  - label: Edit
    fields:
      - rental_address.address
      - recompute:
        - rental_address.county_correct
    button: |
      **Address of rental property:**
      ${rental_address.on_one_line(bare=True)}
    show if: landlord_check  
  - Edit: property_type_check
    button: |
      **Is the property:**
      
      % if rental_address.city.lower() == "chicago":
      * **A medical, educational, or relgious facility,**
      * **A hotel or motel,**
      * **Something you have signed a contract to buy,**
      * **A place you had to rent because the landlord is your employer, and the job required you to rent there, or**
      * **A co-op**
      % elif rental_address.city.lower() == "dekalb":
      * **A medical, educational, or relgious facility,**
      * **A hotel or motel,**
      * **Government-owned, or**
      * **A rooming house**
      % elif rental_address.city.lower() == "evanston":
      * **A medical, educational, or relgious facility,**
      * **A hotel or motel,**
      * **A fraternity or social organization,**
      * **Something you have signed a contract to buy,**
      * **A co-op, or**
      * **An educational institution**
      % elif rental_address.city.lower() == "mount prospect":
      * **A medical, educational, or relgious facility,**
      * **A residential care home,**
      * **A hotel or motel, or**
      * **Something you have signed a contract to buy**
      % elif rental_address.city.lower() == "oak park":
      * **A hotel or motel,**
      * **A medical, educational, or relgious facility,**
      * **A school dormitory,**
      * **A temporary or transitional shelter,**
      * **A place you had to rent because the landlord is your employer, and the job required you to rent there**
      % elif rental_address.city.lower() == "urbana":
      * **A medical, educational, or relgious facility,**
      * **A hotel or motel,**
      * **A fraternity or social organization,**
      * **Something you have signed a contract to buy, or**
      * **A place you had to rent because the landlord is your employer, and the job required you to rent there**
      % elif end_in_county(rental_address.county).lower() == "cook county":
      * **A hotel or motel,**
      * **A school dormitory,**
      * **A shelter or a single-room-occupancy (SRO),**
      * **A place you had to rent because the landlord is your employer, and the job required you to rent there, or**
      * **An owner-occupied co-op**
      % endif
      
      ${word(yesno(property_type_check))}
    show if: rental_address.city.lower() == "chicago" or rental_address.city.lower() == "dekalb" or rental_address.city.lower() == "evanston" or rental_address.city.lower() == "mount prospect" or rental_address.city.lower() == "oak park" or rental_address.city.lower() == "urbana" or end_in_county(rental_address.county).lower() == "cook county"
  - Edit: owner_occupant
    button: |
      **Does the landlord live in one of the units on the property?**
      ${word(yesno(owner_occupant))}
    show if: landlord_check == True
  - Edit: cook_family_check
    button: |
      **Is the property a single-family home or condominium, where**

      * **the landlord is only renting that one rental property, and**
      * **the landlord or an immediate family member has lived in the home within the year?**
      
      ${word(yesno(cook_family_check))}
    show if: owner_occupant == False and end_in_county(rental_address.county).lower() == "cook county" and rental_address.city.lower() != "chicago" and rental_address.city.lower() != "oak park" and rental_address.city.lower() != "evanston" and rental_address.city.lower() != "mount prospect"
  - Edit: unit_number_general
    button: |
      **How many units are in the property?**
      % if unit_number_general == "too_few_for_illinois":
      4 or fewer
      % elif unit_number_general == "depends_on_area":
      5 or 6 units
      % elif unit_number_general == "enough_anywhere":
      7 or more
      % elif unit_number_general == "dont_know":
      I don't know
      % endif
  - Edit: deposit_payments[0]
    button: |
      % if another_deposit[0] == True:
      **First security deposit payment:**
      % else:
      **Security deposit payment:**
      % endif
      ${currency(deposit_payments[0])}
    show if: landlord_check
  - Edit: deposit_dates[0]
    button: |
      % if another_deposit[0] == True:
      **Date of first deposit payment:**
      % else:
      **Date of deposit payment:**
      % endif
      ${deposit_dates[0]}
    show if: landlord_check
  - Edit: another_deposit[0]
    button: |
      **Did you make more than one payment?**
      ${word(yesno(another_deposit[0]))}
    show if: landlord_check
  - Edit: deposit_payments[1]
    button: |
      **Second security deposit payment:**
      ${currency(deposit_payments[1])}
    show if: landlord_check == True and another_deposit[0] == True
  - Edit: deposit_dates[1]
    button: |
      **Date of second deposit payment:**
      ${deposit_dates[1]}
    show if: landlord_check == True and another_deposit[0] == True
  - Edit: another_deposit[1]
    button: |
      **Did you make more than two payments?**
      ${word(yesno(another_deposit[1]))}
    show if: landlord_check == True and another_deposit[0] == True
  - Edit: deposit_payments[2]
    button: |
      **Total of remaining security deposit payments:**
      ${currency(deposit_payments[2])}
    show if: landlord_check == True and another_deposit[0] == True and another_deposit[1] == True
  - Edit: deposit_dates[2]
    button: |
      **Date of final deposit payment:**
      ${deposit_dates[2]}
    show if: landlord_check == True and another_deposit[0] == True and another_deposit[1] == True
  - Edit: partial_return_check
    button: |
      **Did your landlord return part of your security deposit?**
      ${word(yesno(partial_return_check))}
    show if: landlord_check
  - Edit: partial_return_amount
    button: |
      **Amount returned to you:**
      ${currency(partial_return_amount)}
    show if: landlord_check == True and partial_return_check == True
  - Edit: partial_return_date
    button: |
      **Date partial amount returned to you:**
      ${partial_return_date}
    show if: landlord_check == True and partial_return_check == True
  - Edit: damages_check
    button: |
      **Did your landlord send you a letter saying they need money from your security deposit to make repairs?**
      ${word(yesno(damages_check))}
    show if: landlord_check
  - Edit: dispute_withholding
    button: |
      **Do you agree that your landlord used a reasonable amount of the deposit to repair damages?**
      ${word(yesno(dispute_withholding))}
    show if: landlord_check and damages_check
  - Edit: damages_date
    button: |
      **Date you received the statement of damages:**
      ${damages_date}
    show if: landlord_check and damages_check
  - Edit: lease_check
    button: |
      **Did you have a written lease?**
      ${word(yesno(lease_check))}
    show if: landlord_check
  - Edit: lease_attach_check
    button: |
      **Will you attach a copy of the lease?**
      ${word(yesno(lease_attach_check))}
    show if: landlord_check == True and lease_check == True
  - Edit: lease_attach_explain
    button: |
      **Why can't you attach a copy of your lease?**
      ${lease_attach_explain}
    show if: landlord_check == True and lease_check == True and lease_attach_check == False
  - Edit: deposit_payment_proof
    button: |
      **Will you attach proof you paid a security deposit?**
      ${word(yesno(deposit_payment_proof))}
    show if: landlord_check
  - Edit: demand_letter_attach
    button: |
      **Will you attach a copy of the demand letter you sent?**
      ${word(yesno(demand_letter_attach))}
    show if: landlord_check
  - label: Edit
    fields:
      - use_new_text
      - recompute:
        - use_that_default
        - deposit_claim_reason
    button: |
      **Your claim (Edit to refresh text with your latest answers):**  
      ${deposit_claim_reason}
    show if: landlord_check == True and use_new_text == False
  - label: Edit
    fields:
      - use_new_text
      - new_deposit_claim_reason
      - recompute:
        - use_that_default
        - deposit_claim_reason 
    button: |
      **Your claim:**  
      
      ${deposit_claim_reason}
    show if: landlord_check == True and use_new_text == True
  - Edit: add_second_page
    button: |
      **Do you need a second page to explain your claim?**
      ${word(yesno(add_second_page))}
    show if: landlord_check == True and use_new_text == True
  - Edit: more_deposit_reason
    button: |
      **Your claim (second page):**
      
      ${more_deposit_reason}
    show if: landlord_check == True and use_new_text == True and add_second_page == True
  - Edit: agreement_check
    button: |
      % if other_parties.number_gathered() > 1:
      **Do you have a written agreement with the defendants?**
      % else:
      **Do you have a written agreement with ${other_parties[0].name.full(middle='full')}?**
      % endif
      ${word(yesno(agreement_check))}
    show if: landlord_check == False
  - Edit: attach_check
    button: |
      **Will you attach your written agreement?**
      ${word(yesno(attach_check))}
    show if: agreement_check == True and landlord_check == False
  - Edit: attach_explain
    button: |
      **Why can't you attach a copy of your written agreement?**
      ${attach_explain}
    show if: agreement_check == True and attach_check == False and landlord_check == False
  - Edit: demand_check
    button: |
      **Have you demanded payment of ${currency(amount_check)}?**
      ${word(yesno(demand_check))}
    show if: landlord_check == False
  - Edit: demand_answer_check
    button: |
      % if other_parties.number_gathered() > 1:
      **Have the defendants failed to pay you in full?**
      % else:
      **Has ${other_parties[0].name.full(middle='full')} failed to pay you in full?**
      % endif
      ${word(yesno(demand_answer_check))}
    show if: landlord_check == False and demand_check == True
  - Edit: claim_reason
    button: |
      % if other_parties.number_gathered() > 1:
      **Why do the defendants owe you ${currency(amount_check)}?**
      % else:
      **Why does ${other_parties[0].name.full(middle='full')} owe you ${currency(amount_check)}?**
      % endif
      
      ${claim_reason}
    show if: landlord_check == False
  - Edit: preview_complaint
    button: |
      % if other_parties.number_gathered() > 1:
      **Do you need a second page to explain why the defendants owe you ${currency(amount_check)}?**
      % else:
      **Do you need a second page to explain why ${other_parties[0].name.full(middle='full')} owes you ${currency(amount_check)}?**
      % endif
      % if preview_complaint == "Additional page":
      Yes
      % else:
      No
      % endif
    show if: landlord_check == False
  - Edit: more_reason
    button: |
      % if other_parties.number_gathered() > 1:
      **Why do the defendants owe you ${currency(amount_check)} (second page)?**
      % else:
      **Why does ${other_parties[0].name.full(middle='full')} owe you ${currency(amount_check)} (second page)?**
      % endif
      
      ${more_reason}
    show if: landlord_check == False
  - Edit: other_parties.revisit
    button: |
      **Defendants: (Edit to change names, addresses, and other information)**

      % for my_var in other_parties:
        * ${ my_var.name.full(middle="full") }
      % endfor
---
section: About you
id: user review screen
event: section_about_you
question: |
  About you
subquestion: |
  Edit your answers below.
review:
  - Edit: users[0].name.first
    button: |
      **Your name:**
      ${users[0].name.full(middle='full')}
  - Edit: users[0].address.address
    button: |
      **Your address:**
      ${users[0].address.on_one_line(bare=True)}
  - Edit: users[0].phone_number
    button: |
      **Your phone number:**
      ${phone_number_formatted(users[0].phone_number)}
  - Edit: users[0].email
    button: |
      **Your email address:**
      ${users[0].email}
  - Edit: e_signature
    button: |
      **Do you want to add your electronic signature to your forms?**
      ${word(yesno(e_signature))}
---
section: Service information
id: service review screen
event: section_service
question: |
  Service information
subquestion: |
  Edit your answers below.
review:
  - Edit: other_parties.revisit
    button: |
      **Defendants: (Edit to change names, addresses, and other information)**

      % for my_var in other_parties:
        * ${ my_var.name.full(middle="full") }
      % endfor
---
#code block for creating variables used only in attachment blocks. Why oh why docassemble won't let me just put this code by the corresponding fields is beyond me.
#service_address is the baseline service address, alt_service_address is used for the question paths that still ask for a second service address. The where_to_serve variable is the potentially redundant one; it is used to determine whether opposing_parties[i].address or opposing_parties[i].service_address is used in the form based on the value of opposing_parties[i].same_address.
reconsider: True
code: | 
  if landlord_check == True:
    if use_new_text == True:
      if add_second_page == True:
        reasons_attach = True
      else:
        reasons_attach = False
  
    if lease_check == False:
      no_agreement_logic = True
    else:
      no_agreement_logic = False
      
    if lease_check == True and lease_attach_check == True:
      attached_agreement_logic = True
    else:
      attached_agreement_logic = False
    
    if lease_check == True and lease_attach_check == False:
      unattached_agreement_logic = True
    else:
      unattached_agreement_logic = False

    if lease_check == True and lease_attach_check == False:
      unattached_reason_logic = lease_attach_explain
    else:
      unattached_reason_logic = ""
      
      
  else:
    if add_second_page == True:
      reasons_attach = True
    else:
      reasons_attach = False
    
    if agreement_check == False:
      no_agreement_logic = True
    else:
      no_agreement_logic = False
    
    if agreement_check == True and attach_check == True:
      attached_agreement_logic = True
    else:
      attached_agreement_logic = False

    if agreement_check == True and attach_check == False:
      unattached_agreement_logic = True
    else:
      unattached_agreement_logic = False
    
    if agreement_check == True and attach_check == False:
      unattached_reason_logic = attach_explain
    else:
      unattached_reason_logic = ""
    
    if demand_check == True:
      have_demanded_field = demand_answer_check
    else:
      have_demanded_field = demand_check
    
      
  for person in other_parties:
    if person.agent_check == True:
      person.where_to_serve = person.service_address
    elif person.same_address == False:
      person.where_to_serve = person.service_address
    else:
      person.where_to_serve = person.address
     
  attachment_logic = True